<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>JavaYoHo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-07-20T11:14:00.351Z</updated>
  <id>http://yoursite.com/</id>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Springboot优美整合RabbitMQ</title>
    <link href="http://yoursite.com/2019/07/20/RabbitMq/"/>
    <id>http://yoursite.com/2019/07/20/RabbitMq/</id>
    <published>2019-07-20T09:06:11.000Z</published>
    <updated>2019-07-20T11:14:00.351Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、RabbitMQ-简介"><a href="#一、RabbitMQ-简介" class="headerlink" title="一、RabbitMQ 简介"></a>一、RabbitMQ 简介</h2><p>官方推出的六种模式</p><h3 id="1-1-“Hello-World-”"><a href="#1-1-“Hello-World-”" class="headerlink" title="1.1 “Hello World!”"></a>1.1 “Hello World!”</h3><p><img src="https://img-blog.csdnimg.cn/20190720145646828.png" alt="在这里插入图片描述"><br>简单模式 一对一生产消费</p><a id="more"></a><h3 id="1-2-Work-Queues"><a href="#1-2-Work-Queues" class="headerlink" title="1.2 Work Queues"></a>1.2 Work Queues</h3><p><img src="https://img-blog.csdnimg.cn/20190720145947947.png" alt="在这里插入图片描述"><br>一个生产者对应多个消费队列<br>默认情况下，RabbitMQ将按顺序将每条消息发送给下一个消费者。平均而言，每个消费者将获得相同数量的消息</p><h3 id="1-3-Publish-Subscribe"><a href="#1-3-Publish-Subscribe" class="headerlink" title="1.3 Publish/Subscribe"></a>1.3 Publish/Subscribe</h3><p><img src="https://img-blog.csdnimg.cn/2019072015044025.png" alt="在这里插入图片描述"><br>订阅发布：多个队列订阅一个交换机，每个队列都会接收到自己订阅的交换机</p><h3 id="1-4-Routing"><a href="#1-4-Routing" class="headerlink" title="1.4 Routing"></a>1.4 Routing</h3><p><img src="https://img-blog.csdnimg.cn/2019072015100250.png" alt="在这里插入图片描述"><br>路由模式：对消息进行过滤，把控消费队列获取消息的信息量</p><h3 id="1-5-Topics"><a href="#1-5-Topics" class="headerlink" title="1.5 Topics"></a>1.5 Topics</h3><p><img src="https://img-blog.csdnimg.cn/20190720151402627.png" alt="在这里插入图片描述"><br>主题模式：<br>*（星号）可以替代一个单词。＃（hash）可以替换零个或多个单词。<br>这里也相当于根据消费者的习性进行分发消费，功能很强大</p><h3 id="1-6-RPC"><a href="#1-6-RPC" class="headerlink" title="1.6 RPC"></a>1.6 RPC</h3><p><img src="https://img-blog.csdnimg.cn/2019072015184010.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zODkzNzg0MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>远程服务调用：有待学习。。。。</p><h2 id="二、项目整合"><a href="#二、项目整合" class="headerlink" title="二、项目整合"></a>二、项目整合</h2><h3 id="2-1-配置文件"><a href="#2-1-配置文件" class="headerlink" title="2.1 配置文件"></a>2.1 配置文件</h3><h4 id="2-1-1-pom文件"><a href="#2-1-1-pom文件" class="headerlink" title="2.1.1 pom文件"></a>2.1.1 pom文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;com.javayh&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;javayh-mq&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">        &lt;relativePath&gt;../&lt;/relativePath&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;groupId&gt;com.javayh&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;javayh-rabbit&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;name&gt;javayh-rabbit&lt;/name&gt;</span><br><span class="line">    &lt;description&gt;Demo project for Spring Boot&lt;/description&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-amqp&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><h4 id="2-1-2-yml文件"><a href="#2-1-2-yml文件" class="headerlink" title="2.1.2 yml文件"></a>2.1.2 yml文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8025</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: javayh-rabbit</span><br><span class="line">  rabbitmq:</span><br><span class="line">    host: localhost</span><br><span class="line">    port: 5672</span><br><span class="line">    username: guest</span><br><span class="line">    password: guest</span><br><span class="line">    #虚拟主机(一个RabbitMQ服务可以配置多个虚拟主机，每一个虚拟机主机之间是相互隔离，相互独立的，授权用户到指定的virtual-host就可以发送消息到指定队列)</span><br><span class="line">    virtual-host: /</span><br><span class="line">    #消息发送确认回调</span><br><span class="line">    publisher-confirms: true</span><br><span class="line">#    listener:</span><br><span class="line">#      simple:</span><br><span class="line">#        max-concurrency: 20</span><br><span class="line">#        concurrency: 10</span><br></pre></td></tr></table></figure><h3 id="2-2-模式配置"><a href="#2-2-模式配置" class="headerlink" title="2.2 模式配置"></a>2.2 模式配置</h3><h4 id="2-2-1-Fanout配置"><a href="#2-2-1-Fanout配置" class="headerlink" title="2.2.1 Fanout配置"></a>2.2.1 Fanout配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class FanoutRabbitConfig &#123;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public Queue AMessage() &#123;</span><br><span class="line">        return new Queue(JAVAYOHO_QUEUE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public Queue BMessage() &#123;</span><br><span class="line">        return new Queue(YHJ_QUEUE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public Queue CMessage() &#123;</span><br><span class="line">        return new Queue(DYLAN_QUEUE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    FanoutExchange fanoutExchange() &#123;</span><br><span class="line">        return new FanoutExchange(JAVAYH_EXCHANGE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    Binding bindingExchangeA(Queue AMessage,FanoutExchange fanoutExchange) &#123;</span><br><span class="line">        return BindingBuilder.bind(AMessage).to(fanoutExchange);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    Binding bindingExchangeB(Queue BMessage, FanoutExchange fanoutExchange) &#123;</span><br><span class="line">        return BindingBuilder.bind(BMessage).to(fanoutExchange);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    Binding bindingExchangeC(Queue CMessage, FanoutExchange fanoutExchange) &#123;</span><br><span class="line">        return BindingBuilder.bind(CMessage).to(fanoutExchange);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-2-Direct配置"><a href="#2-2-2-Direct配置" class="headerlink" title="2.2.2  Direct配置"></a>2.2.2  Direct配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class DirectConfiguration &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 配置交换机实例</span><br><span class="line">     * 为交换机设置名称</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @Bean</span><br><span class="line">    public DirectExchange directExchange() &#123;</span><br><span class="line">        return new DirectExchange(SAVE_USER_EXCHANGE_NAME);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 配置队列实例，并且设置持久化队列</span><br><span class="line">     *</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @Bean</span><br><span class="line">    public Queue queue() &#123;</span><br><span class="line">        return new Queue(SAVE_USER_QUEUE_NAME, true);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 将队列绑定到交换机上，并设置消息分发的路由键</span><br><span class="line">     *</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @Bean</span><br><span class="line">    public Binding binding() &#123;</span><br><span class="line">       return BindingBuilder.bind(queue()).to(directExchange()).with(SAVE_USER_QUEUE_ROUTE_KEY);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-3-Topic配置"><a href="#2-2-3-Topic配置" class="headerlink" title="2.2.3  Topic配置"></a>2.2.3  Topic配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">public class TopicRabbitConfig &#123;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public Queue queueMessage() &#123;</span><br><span class="line">        return new Queue(JAVAYOHO_TOPIC);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public Queue queueMessages() &#123;</span><br><span class="line">        return new Queue(YHJ_TOPIC);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    TopicExchange exchange() &#123;</span><br><span class="line">        return new TopicExchange(TOPIC_EXCHANGE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    Binding bindingExchangeMessage(Queue queueMessage, TopicExchange exchange) &#123;</span><br><span class="line">        return BindingBuilder.bind(queueMessage).to(exchange).with(TOPIC_KEY);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    Binding bindingExchangeMessages(Queue queueMessages, TopicExchange exchange) &#123;</span><br><span class="line">        return BindingBuilder.bind(queueMessages).to(exchange).with(TOPIC);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、生产者创建"><a href="#三、生产者创建" class="headerlink" title="三、生产者创建"></a>三、生产者创建</h2><h3 id="3-1-统一接口封装"><a href="#3-1-统一接口封装" class="headerlink" title="3.1 统一接口封装"></a>3.1 统一接口封装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public interface SendService extends RabbitTemplate.ConfirmCallback &#123;</span><br><span class="line">    void sendMessage(Object message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-消息生产"><a href="#3-2-消息生产" class="headerlink" title="3.2 消息生产"></a>3.2 消息生产</h3><p>这里主要以Topic为主，其他的模式在文章底部有代码连接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">    * Topic</span><br><span class="line">    * @param message</span><br><span class="line">    * @return</span><br><span class="line">    */</span><br><span class="line">   public String saveTopic(String message) &#123;</span><br><span class="line">       //发送消息到RabbitMQ</span><br><span class="line">       sendTopicService.sendMessage(message);</span><br><span class="line">       return message;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="四、RabbitMq客户端"><a href="#四、RabbitMq客户端" class="headerlink" title="四、RabbitMq客户端"></a>四、RabbitMq客户端</h2><h3 id="4-1-Topic主题"><a href="#4-1-Topic主题" class="headerlink" title="4.1 Topic主题"></a>4.1 Topic主题</h3><p>项目启动后，我们登录客户端，这时我们的Topic主题创建完成<br><img src="https://img-blog.csdnimg.cn/20190720183031917.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zODkzNzg0MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="4-2-队列获取消息"><a href="#4-2-队列获取消息" class="headerlink" title="4.2 队列获取消息"></a>4.2 队列获取消息</h3><p>项目启动后，访问生产者，进行消息生产，在队列内即可看到我们的消息<br><img src="https://img-blog.csdnimg.cn/20190720183332243.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zODkzNzg0MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="4-3-消费者进行消费"><a href="#4-3-消费者进行消费" class="headerlink" title="4.3 消费者进行消费"></a>4.3 消费者进行消费</h3><p><img src="https://img-blog.csdnimg.cn/20190720183813102.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zODkzNzg0MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190720183905714.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zODkzNzg0MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>至此Springboot与RabbitMq的整合已完成，希望对初学者有所帮助<br>项目源码：<a href="https://github.com/Dylan-haiji/javayh-cloud/tree/master/javayh-mq/javayh-rabbit" target="_blank" rel="noopener">https://github.com/Dylan-haiji/javayh-cloud/tree/master/javayh-mq/javayh-rabbit</a> ，欢迎各位start</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、RabbitMQ-简介&quot;&gt;&lt;a href=&quot;#一、RabbitMQ-简介&quot; class=&quot;headerlink&quot; title=&quot;一、RabbitMQ 简介&quot;&gt;&lt;/a&gt;一、RabbitMQ 简介&lt;/h2&gt;&lt;p&gt;官方推出的六种模式&lt;/p&gt;
&lt;h3 id=&quot;1-1-“Hello-World-”&quot;&gt;&lt;a href=&quot;#1-1-“Hello-World-”&quot; class=&quot;headerlink&quot; title=&quot;1.1 “Hello World!”&quot;&gt;&lt;/a&gt;1.1 “Hello World!”&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20190720145646828.png&quot; alt=&quot;在这里插入图片描述&quot;&gt;&lt;br&gt;简单模式 一对一生产消费&lt;/p&gt;
    
    </summary>
    
    
      <category term="微服务" scheme="http://yoursite.com/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot整合SpringCloud实现微服务治理教程</title>
    <link href="http://yoursite.com/2019/07/16/Cloud/"/>
    <id>http://yoursite.com/2019/07/16/Cloud/</id>
    <published>2019-07-16T09:06:11.000Z</published>
    <updated>2019-07-16T09:11:38.235Z</updated>
    
    <content type="html"><![CDATA[<h1 id="javayh-cloud"><a href="#javayh-cloud" class="headerlink" title="javayh-cloud"></a>javayh-cloud</h1><h4 id="本代码仅作为学习使用，如有错误还请多多包涵，大家可以将自己学习的代码进行上传，可以联系小编-372787553进行微信沟通"><a href="#本代码仅作为学习使用，如有错误还请多多包涵，大家可以将自己学习的代码进行上传，可以联系小编-372787553进行微信沟通" class="headerlink" title="本代码仅作为学习使用，如有错误还请多多包涵，大家可以将自己学习的代码进行上传，可以联系小编:372787553进行微信沟通"></a>本代码仅作为学习使用，如有错误还请多多包涵，大家可以将自己学习的代码进行上传，可以联系小编:372787553进行微信沟通</h4><h2 id="项目层次介绍"><a href="#项目层次介绍" class="headerlink" title="项目层次介绍"></a>项目层次介绍</h2><h4 id="1-版本"><a href="#1-版本" class="headerlink" title="1.版本"></a>1.版本</h4><p><code>本示例基于SpringBoot2.0.2 SpringCloud Finchley.SR1进行开发学习</code></p><h4 id="2-模块介绍"><a href="#2-模块介绍" class="headerlink" title="2.模块介绍"></a>2.模块介绍</h4><h5 id="lt-父工程-gt-javayh-cloud"><a href="#lt-父工程-gt-javayh-cloud" class="headerlink" title="&lt;!--父工程--&gt; javayh-cloud"></a><code>&lt;!--父工程--&gt; javayh-cloud</code></h5><h5 id="master分支内容"><a href="#master分支内容" class="headerlink" title="master分支内容"></a>master分支内容</h5><h5 id="lt-注册中心-gt-javayh-eureka"><a href="#lt-注册中心-gt-javayh-eureka" class="headerlink" title="&lt;!--注册中心--&gt; javayh-eureka"></a><code>&lt;!--注册中心--&gt; javayh-eureka</code></h5><a id="more"></a><h5 id="lt-权限注册服务-gt-javayh-oauth"><a href="#lt-权限注册服务-gt-javayh-oauth" class="headerlink" title="&lt;!--权限注册服务--&gt; javayh-oauth"></a><code>&lt;!--权限注册服务--&gt; javayh-oauth</code></h5><h5 id="lt-资源服务-gt-javayh-shop"><a href="#lt-资源服务-gt-javayh-shop" class="headerlink" title="&lt;!--资源服务--&gt; javayh-shop"></a><code>&lt;!--资源服务--&gt; javayh-shop</code></h5><h5 id="lt-路由服务-gt-javayh-zuul"><a href="#lt-路由服务-gt-javayh-zuul" class="headerlink" title="&lt;!--路由服务--&gt; javayh-zuul"></a><code>&lt;!--路由服务--&gt; javayh-zuul</code></h5><h5 id="lt-持久层封装-gt-javayh-mybatis"><a href="#lt-持久层封装-gt-javayh-mybatis" class="headerlink" title="&lt;!--持久层封装--&gt; javayh-mybatis"></a><code>&lt;!--持久层封装--&gt; javayh-mybatis</code></h5><h5 id="lt-工具类-gt-javayh-commons"><a href="#lt-工具类-gt-javayh-commons" class="headerlink" title="&lt;!--工具类--&gt; javayh-commons"></a><code>&lt;!--工具类--&gt; javayh-commons</code></h5><h5 id="lt-搜索引擎-gt-javayh-elasticsearch"><a href="#lt-搜索引擎-gt-javayh-elasticsearch" class="headerlink" title="&lt;!--搜索引擎--&gt; javayh-elasticsearch"></a><code>&lt;!--搜索引擎--&gt; javayh-elasticsearch</code></h5><h5 id="lt-MybatisPlus-gt-javayh-mybatisplus"><a href="#lt-MybatisPlus-gt-javayh-mybatisplus" class="headerlink" title="&lt;!--MybatisPlus--&gt; javayh-mybatisplus"></a><code>&lt;!--MybatisPlus--&gt; javayh-mybatisplus</code></h5><h5 id="lt-缓存服务-gt-javayh-redis"><a href="#lt-缓存服务-gt-javayh-redis" class="headerlink" title="&lt;!--缓存服务--&gt; javayh-redis"></a><code>&lt;!--缓存服务--&gt; javayh-redis</code></h5><h5 id="lt-Feign-gt-javayh-feign"><a href="#lt-Feign-gt-javayh-feign" class="headerlink" title="&lt;!--Feign--&gt; javayh-feign"></a><code>&lt;!--Feign--&gt; javayh-feign</code></h5><h5 id="lt-NIO-gt-javayh-nio"><a href="#lt-NIO-gt-javayh-nio" class="headerlink" title="&lt;!--NIO--&gt; javayh-nio"></a><code>&lt;!--NIO--&gt; javayh-nio</code></h5><h5 id="lt-Admin-gt-javayh-admin"><a href="#lt-Admin-gt-javayh-admin" class="headerlink" title="&lt;!--Admin--&gt; javayh-admin"></a><code>&lt;!--Admin--&gt; javayh-admin</code></h5><h5 id="lt-Thread-gt-javayh-thread"><a href="#lt-Thread-gt-javayh-thread" class="headerlink" title="&lt;!--Thread--&gt; javayh-thread"></a><code>&lt;!--Thread--&gt; javayh-thread</code></h5><h5 id="lt-Activiti-gt-javayh-activiti"><a href="#lt-Activiti-gt-javayh-activiti" class="headerlink" title="&lt;!--Activiti--&gt; javayh-activiti"></a><code>&lt;!--Activiti--&gt; javayh-activiti</code></h5><h5 id="lt-job-gt-javayh-job"><a href="#lt-job-gt-javayh-job" class="headerlink" title="&lt;!--job--&gt; javayh-job"></a><code>&lt;!--job--&gt; javayh-job</code></h5><h5 id="javayh-dubbo分支内容"><a href="#javayh-dubbo分支内容" class="headerlink" title="javayh-dubbo分支内容"></a>javayh-dubbo分支内容</h5><h5 id="lt-dubbo-gt-javayh-dubbo"><a href="#lt-dubbo-gt-javayh-dubbo" class="headerlink" title="&lt;!--dubbo--&gt; javayh-dubbo"></a><code>&lt;!--dubbo--&gt; javayh-dubbo</code></h5><h5 id="lt-公用类-gt-javayh-dubbo-api"><a href="#lt-公用类-gt-javayh-dubbo-api" class="headerlink" title="&lt;!--公用类--&gt; javayh-dubbo-api"></a><code>&lt;!--公用类--&gt; javayh-dubbo-api</code></h5><h5 id="lt-消费者-gt-javayh-dubbo-client"><a href="#lt-消费者-gt-javayh-dubbo-client" class="headerlink" title="&lt;!--消费者--&gt; javayh-dubbo-client"></a><code>&lt;!--消费者--&gt; javayh-dubbo-client</code></h5><h5 id="lt-生产者-gt-javayh-dubbo-server"><a href="#lt-生产者-gt-javayh-dubbo-server" class="headerlink" title="&lt;!--生产者--&gt; javayh-dubbo-server"></a><code>&lt;!--生产者--&gt; javayh-dubbo-server</code></h5><h5 id="lt-监控台-gt-javayh-dubbo-admin"><a href="#lt-监控台-gt-javayh-dubbo-admin" class="headerlink" title="&lt;!--监控台--&gt; javayh-dubbo-admin"></a><code>&lt;!--监控台--&gt; javayh-dubbo-admin</code></h5><h5 id="lt-监控台启动类-gt-dubbo-admin"><a href="#lt-监控台启动类-gt-dubbo-admin" class="headerlink" title="&lt;!--监控台启动类--&gt; dubbo-admin"></a><code>&lt;!--监控台启动类--&gt; dubbo-admin</code></h5><h5 id="lt-监控台-gt-dubbo-monitor-simple"><a href="#lt-监控台-gt-dubbo-monitor-simple" class="headerlink" title="&lt;!--监控台--&gt; dubbo-monitor-simple"></a><code>&lt;!--监控台--&gt; dubbo-monitor-simple</code></h5><h5 id="lt-监控台-gt-dubbo-registry-simple"><a href="#lt-监控台-gt-dubbo-registry-simple" class="headerlink" title="&lt;!--监控台--&gt; dubbo-registry-simple"></a><code>&lt;!--监控台--&gt; dubbo-registry-simple</code></h5><h5 id="javayh-sda分支内容"><a href="#javayh-sda分支内容" class="headerlink" title="javayh-sda分支内容"></a>javayh-sda分支内容</h5><h5 id="lt-数据结构-gt-javayh-psda"><a href="#lt-数据结构-gt-javayh-psda" class="headerlink" title="&lt;!--数据结构--&gt; javayh-psda"></a><code>&lt;!--数据结构--&gt; javayh-psda</code></h5><h5 id="lt-设计模式-gt-javayh-patterns"><a href="#lt-设计模式-gt-javayh-patterns" class="headerlink" title="&lt;!--设计模式--&gt; javayh-patterns"></a><code>&lt;!--设计模式--&gt; javayh-patterns</code></h5><h4 id="3-模块间关系"><a href="#3-模块间关系" class="headerlink" title="3.模块间关系"></a>3.模块间关系</h4><h5 id="3-1-权限验证"><a href="#3-1-权限验证" class="headerlink" title="3.1 权限验证"></a>3.1 权限验证</h5><p>具体流程查看:<a href="https://blog.csdn.net/weixin_38937840/article/details/90321037" target="_blank" rel="noopener">https://blog.csdn.net/weixin_38937840/article/details/90321037</a></p><h4 id="需启动：如需看效果请切换至master分支"><a href="#需启动：如需看效果请切换至master分支" class="headerlink" title="需启动：如需看效果请切换至master分支"></a><code>需启动：</code>如需看效果请切换至master分支</h4><h5 id="lt-注册中心-gt-javayh-eureka-1"><a href="#lt-注册中心-gt-javayh-eureka-1" class="headerlink" title="&lt;!--注册中心--&gt; javayh-eureka"></a><code>&lt;!--注册中心--&gt; javayh-eureka</code></h5><h5 id="lt-权限注册服务-gt-javayh-oauth-1"><a href="#lt-权限注册服务-gt-javayh-oauth-1" class="headerlink" title="&lt;!--权限注册服务--&gt; javayh-oauth"></a><code>&lt;!--权限注册服务--&gt; javayh-oauth</code></h5><h5 id="lt-资源服务-gt-javayh-shop-1"><a href="#lt-资源服务-gt-javayh-shop-1" class="headerlink" title="&lt;!--资源服务--&gt; javayh-shop"></a><code>&lt;!--资源服务--&gt; javayh-shop</code></h5><h5 id="lt-路由服务-gt-javayh-zuul-1"><a href="#lt-路由服务-gt-javayh-zuul-1" class="headerlink" title="&lt;!--路由服务--&gt; javayh-zuul"></a><code>&lt;!--路由服务--&gt; javayh-zuul</code></h5><p><code>需将代码路径下的sql文件导入</code></p><h5 id="3-2-Admin系统管理"><a href="#3-2-Admin系统管理" class="headerlink" title="3.2 Admin系统管理"></a>3.2 Admin系统管理</h5><h4 id="需启动：如需看效果请切换至master分支-1"><a href="#需启动：如需看效果请切换至master分支-1" class="headerlink" title="需启动：如需看效果请切换至master分支"></a><code>需启动：</code>如需看效果请切换至master分支</h4><h5 id="lt-注册中心-gt-javayh-eureka-2"><a href="#lt-注册中心-gt-javayh-eureka-2" class="headerlink" title="&lt;!--注册中心--&gt; javayh-eureka"></a><code>&lt;!--注册中心--&gt; javayh-eureka</code></h5><h5 id="lt-Admin-gt-javayh-admin-1"><a href="#lt-Admin-gt-javayh-admin-1" class="headerlink" title="&lt;!--Admin--&gt; javayh-admin"></a><code>&lt;!--Admin--&gt; javayh-admin</code></h5><h5 id="lt-Feign-gt-javayh-feign-1"><a href="#lt-Feign-gt-javayh-feign-1" class="headerlink" title="&lt;!--Feign--&gt; javayh-feign"></a><code>&lt;!--Feign--&gt; javayh-feign</code></h5><p><code>启动后在浏览器内输入:localhost:8012即可，name：admin  pwd：admin123</code></p><h5 id="3-3-服务降解-Feign接口调用"><a href="#3-3-服务降解-Feign接口调用" class="headerlink" title="3.3 服务降解,Feign接口调用"></a>3.3 服务降解,Feign接口调用</h5><h4 id="需启动：如需看效果请切换至master分支-2"><a href="#需启动：如需看效果请切换至master分支-2" class="headerlink" title="需启动：如需看效果请切换至master分支"></a><code>需启动：</code>如需看效果请切换至master分支</h4><h5 id="lt-注册中心-gt-javayh-eureka-3"><a href="#lt-注册中心-gt-javayh-eureka-3" class="headerlink" title="&lt;!--注册中心--&gt; javayh-eureka"></a><code>&lt;!--注册中心--&gt; javayh-eureka</code></h5><h5 id="lt-Feign-gt-javayh-feign-2"><a href="#lt-Feign-gt-javayh-feign-2" class="headerlink" title="&lt;!--Feign--&gt; javayh-feign"></a><code>&lt;!--Feign--&gt; javayh-feign</code></h5><h5 id="lt-MybatisPlus-gt-javayh-mybatisplus-1"><a href="#lt-MybatisPlus-gt-javayh-mybatisplus-1" class="headerlink" title="&lt;!--MybatisPlus--&gt; javayh-mybatisplus"></a><code>&lt;!--MybatisPlus--&gt; javayh-mybatisplus</code></h5><h5 id="3-4-dubbo-dubbo-admin-zk-boot分布式治理"><a href="#3-4-dubbo-dubbo-admin-zk-boot分布式治理" class="headerlink" title="3.4 dubbo+dubbo-admin+zk+boot分布式治理"></a>3.4 dubbo+dubbo-admin+zk+boot分布式治理</h5><h4 id="需启动：-如需看效果请切换至javayh-dubbo分支"><a href="#需启动：-如需看效果请切换至javayh-dubbo分支" class="headerlink" title="需启动： 如需看效果请切换至javayh-dubbo分支"></a><code>需启动：</code> 如需看效果请切换至javayh-dubbo分支</h4><h5 id="lt-生产者-gt-javayh-dubbo-server-1"><a href="#lt-生产者-gt-javayh-dubbo-server-1" class="headerlink" title="&lt;!--生产者--&gt; javayh-dubbo-server"></a><code>&lt;!--生产者--&gt; javayh-dubbo-server</code></h5><h5 id="lt-消费者-gt-javayh-dubbo-client-1"><a href="#lt-消费者-gt-javayh-dubbo-client-1" class="headerlink" title="&lt;!--消费者--&gt; javayh-dubbo-client"></a><code>&lt;!--消费者--&gt; javayh-dubbo-client</code></h5><h5 id="lt-监控台-gt-javayh-dubbo-admin-1"><a href="#lt-监控台-gt-javayh-dubbo-admin-1" class="headerlink" title="&lt;!--监控台--&gt; javayh-dubbo-admin"></a><code>&lt;!--监控台--&gt; javayh-dubbo-admin</code></h5><h5 id="lt-监控台启动类-gt-javayh-dubbo-admin-dubbo-admin"><a href="#lt-监控台启动类-gt-javayh-dubbo-admin-dubbo-admin" class="headerlink" title="&lt;!--监控台启动类--&gt; javayh-dubbo-admin/dubbo-admin"></a><code>&lt;!--监控台启动类--&gt; javayh-dubbo-admin/dubbo-admin</code></h5><h5 id="监控台服务启动后访问http-localhost-7001"><a href="#监控台服务启动后访问http-localhost-7001" class="headerlink" title="监控台服务启动后访问http://localhost:7001"></a>监控台服务启动后访问<a href="http://localhost:7001" target="_blank" rel="noopener">http://localhost:7001</a></h5><h5 id="name-root-guest-pwd-root-guest-二选一"><a href="#name-root-guest-pwd-root-guest-二选一" class="headerlink" title="name:root/guest  pwd:root/guest 二选一"></a>name:root/guest  pwd:root/guest 二选一</h5><h5 id="如果一直报错，请调大超时时间，根据个人电脑配置有关，找不到api，则需要利用maven-install"><a href="#如果一直报错，请调大超时时间，根据个人电脑配置有关，找不到api，则需要利用maven-install" class="headerlink" title="如果一直报错，请调大超时时间，根据个人电脑配置有关，找不到api，则需要利用maven install"></a>如果一直报错，请调大超时时间，根据个人电脑配置有关，找不到api，则需要利用maven install</h5><h4 id="3-5-其他"><a href="#3-5-其他" class="headerlink" title="3.5 其他"></a>3.5 其他</h4><h4 id="其他模块可单独启动测试，看到控制台报错时，不要慌张，这时启动javayh-eureka即可"><a href="#其他模块可单独启动测试，看到控制台报错时，不要慌张，这时启动javayh-eureka即可" class="headerlink" title="其他模块可单独启动测试，看到控制台报错时，不要慌张，这时启动javayh-eureka即可"></a><code>其他模块可单独启动测试，看到控制台报错时，不要慌张，这时启动javayh-eureka即可</code></h4><h4 id="代码地址-https-github-com-Dylan-haiji-javayh-cloud-如果对您有所帮助请start一下"><a href="#代码地址-https-github-com-Dylan-haiji-javayh-cloud-如果对您有所帮助请start一下" class="headerlink" title="代码地址 https://github.com/Dylan-haiji/javayh-cloud 如果对您有所帮助请start一下"></a>代码地址 <a href="https://github.com/Dylan-haiji/javayh-cloud" target="_blank" rel="noopener">https://github.com/Dylan-haiji/javayh-cloud</a> 如果对您有所帮助请start一下</h4><h4 id="未完待续……"><a href="#未完待续……" class="headerlink" title="未完待续…….."></a>未完待续……..</h4><h3 id="遇到其他问题可以联系小编；微信：372787553"><a href="#遇到其他问题可以联系小编；微信：372787553" class="headerlink" title="遇到其他问题可以联系小编；微信：372787553"></a>遇到其他问题可以联系小编；微信：372787553</h3>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;javayh-cloud&quot;&gt;&lt;a href=&quot;#javayh-cloud&quot; class=&quot;headerlink&quot; title=&quot;javayh-cloud&quot;&gt;&lt;/a&gt;javayh-cloud&lt;/h1&gt;&lt;h4 id=&quot;本代码仅作为学习使用，如有错误还请多多包涵，大家可以将自己学习的代码进行上传，可以联系小编-372787553进行微信沟通&quot;&gt;&lt;a href=&quot;#本代码仅作为学习使用，如有错误还请多多包涵，大家可以将自己学习的代码进行上传，可以联系小编-372787553进行微信沟通&quot; class=&quot;headerlink&quot; title=&quot;本代码仅作为学习使用，如有错误还请多多包涵，大家可以将自己学习的代码进行上传，可以联系小编:372787553进行微信沟通&quot;&gt;&lt;/a&gt;本代码仅作为学习使用，如有错误还请多多包涵，大家可以将自己学习的代码进行上传，可以联系小编:372787553进行微信沟通&lt;/h4&gt;&lt;h2 id=&quot;项目层次介绍&quot;&gt;&lt;a href=&quot;#项目层次介绍&quot; class=&quot;headerlink&quot; title=&quot;项目层次介绍&quot;&gt;&lt;/a&gt;项目层次介绍&lt;/h2&gt;&lt;h4 id=&quot;1-版本&quot;&gt;&lt;a href=&quot;#1-版本&quot; class=&quot;headerlink&quot; title=&quot;1.版本&quot;&gt;&lt;/a&gt;1.版本&lt;/h4&gt;&lt;p&gt;&lt;code&gt;本示例基于SpringBoot2.0.2 SpringCloud Finchley.SR1进行开发学习&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;2-模块介绍&quot;&gt;&lt;a href=&quot;#2-模块介绍&quot; class=&quot;headerlink&quot; title=&quot;2.模块介绍&quot;&gt;&lt;/a&gt;2.模块介绍&lt;/h4&gt;&lt;h5 id=&quot;lt-父工程-gt-javayh-cloud&quot;&gt;&lt;a href=&quot;#lt-父工程-gt-javayh-cloud&quot; class=&quot;headerlink&quot; title=&quot;&amp;lt;!--父工程--&amp;gt; javayh-cloud&quot;&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;!--父工程--&amp;gt; javayh-cloud&lt;/code&gt;&lt;/h5&gt;&lt;h5 id=&quot;master分支内容&quot;&gt;&lt;a href=&quot;#master分支内容&quot; class=&quot;headerlink&quot; title=&quot;master分支内容&quot;&gt;&lt;/a&gt;master分支内容&lt;/h5&gt;&lt;h5 id=&quot;lt-注册中心-gt-javayh-eureka&quot;&gt;&lt;a href=&quot;#lt-注册中心-gt-javayh-eureka&quot; class=&quot;headerlink&quot; title=&quot;&amp;lt;!--注册中心--&amp;gt; javayh-eureka&quot;&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;!--注册中心--&amp;gt; javayh-eureka&lt;/code&gt;&lt;/h5&gt;
    
    </summary>
    
    
      <category term="微服务" scheme="http://yoursite.com/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>ArrayList源码解读</title>
    <link href="http://yoursite.com/2019/07/16/ArayList%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/"/>
    <id>http://yoursite.com/2019/07/16/ArayList源码解读/</id>
    <published>2019-07-16T04:46:11.000Z</published>
    <updated>2019-07-16T04:48:15.386Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ArrayList源码解读"><a href="#ArrayList源码解读" class="headerlink" title="ArrayList源码解读"></a>ArrayList源码解读</h2><blockquote><p>由于本文内容较长，还请各位耐心阅读</p></blockquote><h3 id="ArrayList类图"><a href="#ArrayList类图" class="headerlink" title="ArrayList类图"></a>ArrayList类图</h3><p><img src="https://img-blog.csdnimg.cn/20190716124248996.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zODkzNzg0MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><a id="more"></a>  <h3 id="ArrayList-API"><a href="#ArrayList-API" class="headerlink" title="ArrayList API"></a>ArrayList API</h3><p><img src="https://img-blog.csdnimg.cn/20190716123955850.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zODkzNzg0MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/20190716124117534.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zODkzNzg0MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="源码解读"><a href="#源码解读" class="headerlink" title="源码解读"></a>源码解读</h3><pre><code>public class ArrayList&lt;E&gt; extends AbstractList&lt;E&gt;        implements List&lt;E&gt;, RandomAccess, Cloneable, java.io.Serializable{    private static final long serialVersionUID = 8683452581122892189L;/** * 初始化默认容量 */private static final int DEFAULT_CAPACITY = 10;/** * 当new ArrayList();返回一个size()等于0的数据 */private static final Object[] EMPTY_ELEMENTDATA = {};/** * 一个空数组实例 *   - 当用户没有指定 ArrayList 的容量时(即调用无参构造函数)， *   返回的是该数组==&gt;刚创建一个 ArrayList 时，其内数据量为 0。 *   - 当用户第一次添加元素时，该数组将会扩容， *   变成默认容量为 10(DEFAULT_CAPACITY) 的一个数组===&gt;通过ensureCapacityInternal() 实现 */private static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = {};/** * 存储ArrayList元素的数组缓冲区，arrayList的容量是这个数组缓冲区的长度， * 由于elementdata==defaultcapacity_empty_elementdata的空arraylist * 将在添加第一个元素时扩展为默认容量 */transient Object[] elementData; // non-private to simplify nested class access/** * arratList的存储长度 */private int size;/** * 创建一个指定长度的ArrayList(); */public ArrayList(int initialCapacity) {    //初始长度大于0，则创建指定长度大小    if (initialCapacity &gt; 0) {        this.elementData = new Object[initialCapacity];    } else if (initialCapacity == 0) {        //等于0，创建为空        this.elementData = EMPTY_ELEMENTDATA;    } else {        //小于0，抛出异常        throw new IllegalArgumentException(&quot;Illegal Capacity: &quot;+                initialCapacity);    }}/** * 创建一个空的arrayList * 当第一次add()后，长度自动扩容为10 */public ArrayList() {    this.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;}/** * 创建一个Collection的ArrayList */public ArrayList(Collection&lt;? extends E&gt; c) {    // 将其装换成Object[] toArray()    elementData = c.toArray();    if ((size = elementData.length) != 0) {        // c.toArray might (incorrectly) not return Object[] (see 6260652)        // 判断toArray()方法后，转换是否成功        if (elementData.getClass() != Object[].class)            // 若 c.toArray() 返回的数组类型不是 Object[]，则利用 Arrays.copyOf();            // 来构造一个大小为 size 的 Object[] 数组            elementData = Arrays.copyOf(elementData, size, Object[].class);    } else {        // 替换为空        this.elementData = EMPTY_ELEMENTDATA;    }}/** * 去空后，得到数组实际长度 */public void trimToSize() {    //protected transient int modCount = 0;    modCount++;    /**     * 实际长度 &lt; 默认初始化长度     */    if (size &lt; elementData.length) {        /**         * 如果实际长度等于0，长度为默认长度，         * 如长度不等于0，则变为实际长度         */        elementData = (size == 0)                ? EMPTY_ELEMENTDATA                : Arrays.copyOf(elementData, size);    }}/** * 指定扩容长度 * @param   minCapacity  扩容长度 */public void ensureCapacity(int minCapacity) {    /**     * 判断其长度是不是0，如果是，不进行扩容，否则扩容为10     */    int minExpand = (elementData != DEFAULTCAPACITY_EMPTY_ELEMENTDATA)            ? 0 : DEFAULT_CAPACITY;    //若用户指定的长度大于最长扩容长度，选择用户指定的长度    if (minCapacity &gt; minExpand) {        //调用内部方法        ensureExplicitCapacity(minCapacity);    }}// 新增时长度private void ensureCapacityInternal(int minCapacity) {    if (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) {        minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);    }    ensureExplicitCapacity(minCapacity);}/** *  指定的长度减去默认长度大于0 * @param minCapacity  指定长度 */private void ensureExplicitCapacity(int minCapacity) {    modCount++;    //防止溢出    if (minCapacity - elementData.length &gt; 0)        grow(minCapacity);}/** * 数组缓冲区最大存储容量 * 减8 以防止OutOfMemoryError(当该值 &gt; VM 的限制时) */private static final int MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8;/** * 确保 ArrayList 至少能存储 minCapacity 个元素 * @param minCapacity */private void grow(int minCapacity) {    // 防止溢出代码    int oldCapacity = elementData.length;    //扩容为原来的1.5倍    int newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1);    // 若 newCapacity 依旧小于 minCapacity    if (newCapacity - minCapacity &lt; 0)        newCapacity = minCapacity;    // 若 newCapacity 大于最大存储容量，则进行大容量分配    if (newCapacity - MAX_ARRAY_SIZE &gt; 0)        newCapacity = hugeCapacity(minCapacity);    elementData = Arrays.copyOf(elementData, newCapacity);}//私有方法：大容量分配，最大分配 Integer.MAX_VALUEprivate static int hugeCapacity(int minCapacity) {    if (minCapacity &lt; 0) // overflow        throw new OutOfMemoryError();    return (minCapacity &gt; MAX_ARRAY_SIZE) ?            Integer.MAX_VALUE :            MAX_ARRAY_SIZE;}/** * 返回ArrayList实际存储的元素数量 */public int size() {    return size;}/** * ArrayList是否有元素 */public boolean isEmpty() {    return size == 0;}/** * 判断是否包含某元素 */public boolean contains(Object o) {    return indexOf(o) &gt;= 0;}/** * 根据索引顺序查找 */public int indexOf(Object o) {    if (o == null) {        for (int i = 0; i &lt; size; i++)            if (elementData[i]==null)                return i;    } else {        for (int i = 0; i &lt; size; i++)            if (o.equals(elementData[i]))                return i;    }    return -1;}/** * 逆向查找 */public int lastIndexOf(Object o) {    if (o == null) {        for (int i = size-1; i &gt;= 0; i--)            if (elementData[i]==null)                return i;    } else {        for (int i = size-1; i &gt;= 0; i--)            if (o.equals(elementData[i]))                return i;    }    return -1;}/** *  克隆 */public Object clone() {    try {        /**         * 克隆对象，并将实际长度进行复制         */        ArrayList&lt;?&gt; v = (ArrayList&lt;?&gt;) super.clone();        v.elementData = Arrays.copyOf(elementData, size);        v.modCount = 0;        return v;    } catch (CloneNotSupportedException e) {        // this shouldn&apos;t happen, since we are Cloneable        throw new InternalError(e);    }}/** * 将其转化为Object[] */public Object[] toArray() {    return Arrays.copyOf(elementData, size);}/** * 返回一个ArratList 元素组成的数组 */@SuppressWarnings(&quot;unchecked&quot;)public &lt;T&gt; T[] toArray(T[] a) {    if (a.length &lt; size)        // 新建复制        return (T[]) Arrays.copyOf(elementData, size, a.getClass());    System.arraycopy(elementData, 0, a, 0, size);    // 复制    if (a.length &gt; size)        a[size] = null;    return a;}// 访问指定下标的元素@SuppressWarnings(&quot;unchecked&quot;)E elementData(int index) {    return (E) elementData[index];}/** * 访问指定下标的元素，从0开始 */public E get(int index) {    rangeCheck(index);//判断访问下标是否越界    return elementData(index);}/** * 设置指定小编元素的值 */public E set(int index, E element) {    rangeCheck(index);    //获取旧值    E oldValue = elementData(index);    //替换    elementData[index] = element;    return oldValue;}/** * 新增元素 * @param e * @return */public boolean add(E e) {    ensureCapacityInternal(size + 1);  // Increments modCount!!    //元素位置    elementData[size++] = e;    return true;}/** * 指定下标位置新增 */public void add(int index, E element) {    rangeCheckForAdd(index);//判断是否越界    ensureCapacityInternal(size + 1);    System.arraycopy(elementData, index, elementData, index + 1,            size - index);    elementData[index] = element;    size++;}/** * 移除指定位置元素 */public E remove(int index) {    rangeCheck(index);    modCount++;    E oldValue = elementData(index);    //移动长度    int numMoved = size - index - 1;    if (numMoved &gt; 0)        System.arraycopy(elementData, index+1, elementData, index,                numMoved);    //元素滞空    elementData[--size] = null;    return oldValue;}/** * 指定元素移除 */public boolean remove(Object o) {    if (o == null) {        for (int index = 0; index &lt; size; index++)            if (elementData[index] == null) {                fastRemove(index);                return true;            }    } else {        for (int index = 0; index &lt; size; index++)            if (o.equals(elementData[index])) {                fastRemove(index);                return true;            }    }    return false;}/* * 快速删除第 index 个元素 */private void fastRemove(int index) {    modCount++;    int numMoved = size - index - 1;    if (numMoved &gt; 0)        System.arraycopy(elementData, index+1, elementData, index,                numMoved);    elementData[--size] = null; // clear to let GC do its work}/** * 清空 */public void clear() {    modCount++;    // clear to let GC do its work    for (int i = 0; i &lt; size; i++)        elementData[i] = null;    size = 0;}/** * 新增Collection元素 */public boolean addAll(Collection&lt;? extends E&gt; c) {    Object[] a = c.toArray();    int numNew = a.length;    ensureCapacityInternal(size + numNew);  // Increments modCount    System.arraycopy(a, 0, elementData, size, numNew);    size += numNew;    return numNew != 0;}/** * 指定位置，新增Collection元素 */public boolean addAll(int index, Collection&lt;? extends E&gt; c) {    rangeCheckForAdd(index);    Object[] a = c.toArray();    int numNew = a.length;    ensureCapacityInternal(size + numNew);  // Increments modCount    int numMoved = size - index;    if (numMoved &gt; 0)        System.arraycopy(elementData, index, elementData, index + numNew,                numMoved);    System.arraycopy(a, 0, elementData, index, numNew);    size += numNew;    return numNew != 0;}/** * 移除list中 (fromIndex,toIndex) 的元素 */protected void removeRange(int fromIndex, int toIndex) {    modCount++;    //移动的数量    int numMoved = size - toIndex;    System.arraycopy(elementData, toIndex, elementData, fromIndex,            numMoved);    //移动后的长度    int newSize = size - (toIndex-fromIndex);    //将移除后的滞空    for (int i = newSize; i &lt; size; i++) {        elementData[i] = null;    }    size = newSize;}/** * 判断下标与实际长度大小 */private void rangeCheck(int index) {    if (index &gt;= size)        throw new IndexOutOfBoundsException(outOfBoundsMsg(index));}/** * 下标越界 */private void rangeCheckForAdd(int index) {    if (index &gt; size || index &lt; 0)        throw new IndexOutOfBoundsException(outOfBoundsMsg(index));}/** * 异常返回，操作长度与实际长度 */private String outOfBoundsMsg(int index) {    return &quot;Index: &quot;+index+&quot;, Size: &quot;+size;}/** * 删除多少c */public boolean removeAll(Collection&lt;?&gt; c) {    Objects.requireNonNull(c);    return batchRemove(c, false);}/** * 批量移除 */public boolean retainAll(Collection&lt;?&gt; c) {    //是否空指针    Objects.requireNonNull(c);    return batchRemove(c, true);}private boolean batchRemove(Collection&lt;?&gt; c, boolean complement) {    final Object[] elementData = this.elementData;    int r = 0, w = 0;    boolean modified = false;    try {        for (; r &lt; size; r++)            if (c.contains(elementData[r]) == complement)                elementData[w++] = elementData[r];    } finally {        if (r != size) {            System.arraycopy(elementData, r,                    elementData, w,                    size - r);            w += size - r;        }        if (w != size) {            // clear to let GC do its work            for (int i = w; i &lt; size; i++)                elementData[i] = null;            modCount += size - w;            size = w;            modified = true;        }    }    return modified;}/** * 序列化方法 */private void writeObject(java.io.ObjectOutputStream s)        throws java.io.IOException{    // Write out element count, and any hidden stuff    int expectedModCount = modCount;    s.defaultWriteObject();    // Write out size as capacity for behavioural compatibility with clone()    s.writeInt(size);    // Write out all elements in the proper order.    for (int i=0; i&lt;size; i++) {        s.writeObject(elementData[i]);    }    if (modCount != expectedModCount) {        throw new ConcurrentModificationException();    }}/** * 反序列化 */private void readObject(java.io.ObjectInputStream s)        throws java.io.IOException, ClassNotFoundException {    elementData = EMPTY_ELEMENTDATA;    // Read in size, and any hidden stuff    s.defaultReadObject();    // Read in capacity    s.readInt(); // ignored    if (size &gt; 0) {        // be like clone(), allocate array based upon size not capacity        ensureCapacityInternal(size);        Object[] a = elementData;        // Read in all elements in the proper order.        for (int i=0; i&lt;size; i++) {            a[i] = s.readObject();        }    }}/** * 返回从指定索引开始到结束的带有元素的list迭代器 */public ListIterator&lt;E&gt; listIterator(int index) {    if (index &lt; 0 || index &gt; size)        throw new IndexOutOfBoundsException(&quot;Index: &quot;+index);    return new ListItr(index);}/** * 返回从0索引开始到结束的带有元素的list迭代器 */public ListIterator&lt;E&gt; listIterator() {    return new ListItr(0);}/** * 以一种合适的排序返回一个iterator到元素的结尾 */public Iterator&lt;E&gt; iterator() {    return new Itr();}</code></pre><h4 id="希望对看到的小伙伴有所帮助"><a href="#希望对看到的小伙伴有所帮助" class="headerlink" title="希望对看到的小伙伴有所帮助"></a>希望对看到的小伙伴有所帮助</h4>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;ArrayList源码解读&quot;&gt;&lt;a href=&quot;#ArrayList源码解读&quot; class=&quot;headerlink&quot; title=&quot;ArrayList源码解读&quot;&gt;&lt;/a&gt;ArrayList源码解读&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;由于本文内容较长，还请各位耐心阅读&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;ArrayList类图&quot;&gt;&lt;a href=&quot;#ArrayList类图&quot; class=&quot;headerlink&quot; title=&quot;ArrayList类图&quot;&gt;&lt;/a&gt;ArrayList类图&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20190716124248996.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zODkzNzg0MA==,size_16,color_FFFFFF,t_70&quot; alt=&quot;在这里插入图片描述&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java设计模式之策略者模式</title>
    <link href="http://yoursite.com/2019/07/15/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%AD%96%E7%95%A5%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/07/15/Java设计模式之策略者模式/</id>
    <published>2019-07-15T14:58:11.000Z</published>
    <updated>2019-07-15T15:00:30.596Z</updated>
    
    <content type="html"><![CDATA[<h2 id="策略者模式"><a href="#策略者模式" class="headerlink" title="策略者模式"></a>策略者模式</h2><blockquote><p>简单的说就是提供一种策略，实现不同的结果展示<br>例：<br>比如我们需要根据某个条件去判断用户具有的权限，我们会写很多的if(){}这样的判断，而策略者就是为了解决这样的问题；<br>当然他也很多缺点，还是要根据实际情况进行应该</p></blockquote><a id="more"></a><h2 id="基于Spring实现"><a href="#基于Spring实现" class="headerlink" title="基于Spring实现"></a>基于Spring实现</h2><h4 id="1-策略者"><a href="#1-策略者" class="headerlink" title="1.策略者"></a>1.策略者</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public interface AbstractHandler &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 策略接口</span><br><span class="line">     * @param userName</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    SysUser handle(String userName);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-策略实现"><a href="#2-策略实现" class="headerlink" title="2.策略实现"></a>2.策略实现</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">@Component(value = &quot;dylan&quot;)</span><br><span class="line">public class SysUserPermit implements AbstractHandler &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public SysUser handle(String userName) &#123;</span><br><span class="line">        SysUser sysUser = new SysUser.SysUserBuild().</span><br><span class="line">                        setRole(&quot;admin&quot;).</span><br><span class="line">                        setUserName(&quot;dylan&quot;).</span><br><span class="line">                        setPassWord(&quot;dylan&quot;).</span><br><span class="line">                        setUserType(&quot;select insert update delete&quot;).buildTwo();</span><br><span class="line">        return sysUser;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">@Component(value = &quot;yhj&quot;)</span><br><span class="line">public class SysUserRole implements AbstractHandler&#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public SysUser handle(String userName) &#123;</span><br><span class="line">        SysUser sysUser = new SysUser.SysUserBuild().</span><br><span class="line">                setRole(&quot;guset&quot;).</span><br><span class="line">                setUserName(&quot;yhj&quot;).</span><br><span class="line">                setPassWord(&quot;yhj&quot;).</span><br><span class="line">                setUserType(&quot;select&quot;).buildTwo();</span><br><span class="line">        return sysUser;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-客户端"><a href="#3-客户端" class="headerlink" title="3.客户端"></a>3.客户端</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">public class SysUserContext &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 通过Spring上下文实现自动管理,获取不同的ID进行匹配</span><br><span class="line">     */</span><br><span class="line">    @Autowired</span><br><span class="line">    private final Map&lt;String, AbstractHandler&gt; strategyMap = new ConcurrentHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    public SysUserContext(Map&lt;String, AbstractHandler&gt; strategyMap) &#123;</span><br><span class="line">        this.strategyMap.clear();</span><br><span class="line">        strategyMap.forEach((k, v)-&gt; this.strategyMap.put(k, v));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 根据不同用户名查询</span><br><span class="line">     * @param userName</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public SysUser getResource(String userName)&#123;</span><br><span class="line">        return strategyMap.get(userName).handle(userName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="调用实例"><a href="#调用实例" class="headerlink" title="调用实例"></a>调用实例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">@RequestMapping(value = &quot;/javayh/&quot;)</span><br><span class="line">public class SysUserController &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private SysUserContext sysUserContext;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 根据用户名查询用户信息</span><br><span class="line">     * @param userName</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @GetMapping(value = &quot;query/&#123;userName&#125;&quot;)</span><br><span class="line">    public Result query(@PathVariable String userName)&#123;</span><br><span class="line">        SysUser resource = sysUserContext.getResource(userName);</span><br><span class="line">        return Result.javaYhQuerySuccess(resource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h2><p><img src="https://img-blog.csdnimg.cn/20190625190106104.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zODkzNzg0MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190625190127994.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zODkzNzg0MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>从上面的效果可以看出，我们只需要关注用户名即可，具体如何去掉用我们不在关注，无需在写if的判断，可以说是if的高级写法吧！</p><h6 id="今天的分享就到这里，希望对看到的朋友有所帮助"><a href="#今天的分享就到这里，希望对看到的朋友有所帮助" class="headerlink" title="今天的分享就到这里，希望对看到的朋友有所帮助"></a>今天的分享就到这里，希望对看到的朋友有所帮助</h6><h6 id="如果有疑问可以联系小编，372787553"><a href="#如果有疑问可以联系小编，372787553" class="headerlink" title="如果有疑问可以联系小编，372787553"></a>如果有疑问可以联系小编，372787553</h6><blockquote><p>这是本文的代码地址<br><a href="https://github.com/Dylan-haiji/javayh-cloud" target="_blank" rel="noopener">https://github.com/Dylan-haiji/javayh-cloud</a><br>欢迎各位star</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;策略者模式&quot;&gt;&lt;a href=&quot;#策略者模式&quot; class=&quot;headerlink&quot; title=&quot;策略者模式&quot;&gt;&lt;/a&gt;策略者模式&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;简单的说就是提供一种策略，实现不同的结果展示&lt;br&gt;例：&lt;br&gt;比如我们需要根据某个条件去判断用户具有的权限，我们会写很多的if(){}这样的判断，而策略者就是为了解决这样的问题；&lt;br&gt;当然他也很多缺点，还是要根据实际情况进行应该&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Springboot2.X+Elasticsearch 实现分词搜索</title>
    <link href="http://yoursite.com/2019/07/15/Springboot2.X+Elasticsearch%20%E5%AE%9E%E7%8E%B0%E5%88%86%E8%AF%8D%E6%90%9C%E7%B4%A2/"/>
    <id>http://yoursite.com/2019/07/15/Springboot2.X+Elasticsearch 实现分词搜索/</id>
    <published>2019-07-15T14:50:11.000Z</published>
    <updated>2019-07-15T15:00:08.960Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Elasticsearch-安装"><a href="#Elasticsearch-安装" class="headerlink" title="Elasticsearch 安装"></a>Elasticsearch 安装</h3><blockquote><p>具体安装步骤网上很多，大家可以借鉴一下；<br>关于分词插件的安装可以执行一下命令:<br>拼音插件<br>./bin/elasticsearch-plugin install <a href="https://github.com/medcl/elasticsearch-analysis-pinyin/releases/download/v6.1.1/elasticsearch-analysis-pinyin-6.1.1.zip" target="_blank" rel="noopener">https://github.com/medcl/elasticsearch-analysis-pinyin/releases/download/v6.1.1/elasticsearch-analysis-pinyin-6.1.1.zip</a><br>中文插件<br> ./bin/elasticsearch-plugin install <a href="https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v6.1.1/elasticsearch-analysis-ik-6.1.1.zip" target="_blank" rel="noopener">https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v6.1.1/elasticsearch-analysis-ik-6.1.1.zip</a><br>如不行执行在线下载，也可以离线下载<br>放在安装 elasticsearch 下plugins内即可</p></blockquote><a id="more"></a><h3 id="Boot-Es"><a href="#Boot-Es" class="headerlink" title="Boot + Es"></a>Boot + Es</h3><h4 id="1-相关依赖"><a href="#1-相关依赖" class="headerlink" title="1.相关依赖"></a>1.相关依赖</h4><p>本文用的是boot2.0.2，这里也配置了数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;com.javayh&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;javayh-oauth2&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">        &lt;relativePath&gt;../&lt;/relativePath&gt;&lt;!-- lookup parent from repository --&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;groupId&gt;com.javayh&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;javayh-elasticsearch&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;name&gt;javayh-elasticsearch&lt;/name&gt;</span><br><span class="line">    &lt;packaging&gt;jar&lt;/packaging&gt;</span><br><span class="line">    &lt;description&gt;Demo project for Spring Boot&lt;/description&gt;</span><br><span class="line"></span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.javayh&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;javayh-commons&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-data-elasticsearch&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;net.java.dev.jna&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;jna&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;3.0.9&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">        &lt;/plugins&gt;</span><br><span class="line">    &lt;/build&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><h4 id="2-配置文件"><a href="#2-配置文件" class="headerlink" title="2.配置文件"></a>2.配置文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8087</span><br><span class="line"></span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: javayh-elastic</span><br><span class="line">  data:</span><br><span class="line">    elasticsearch:</span><br><span class="line">      repositories:</span><br><span class="line">        enabled: true</span><br><span class="line">      cluster-name: elasticsearch</span><br><span class="line">      cluster-nodes: 127.0.0.1:9300</span><br><span class="line">      properties:</span><br><span class="line">        path:</span><br><span class="line">          logs: ./elasticsearch/log</span><br><span class="line">          data: ./elasticsearch/data</span><br><span class="line">      local: true</span><br><span class="line">  datasource:</span><br><span class="line">    url: jdbc:mysql://localhost:3306/test?characterEncoding=UTF-8&amp;useUnicode=true&amp;useSSL=false</span><br><span class="line">    username: root</span><br><span class="line">    password: 1219320</span><br><span class="line">    driver-class-name: com.mysql.jdbc.Driver</span><br><span class="line"></span><br><span class="line">mybatis:</span><br><span class="line">  dao-locations: classpath:dao/*.mapper</span><br><span class="line">  type-aliases-package: com.javayh.entity</span><br><span class="line"></span><br><span class="line">eureka:</span><br><span class="line">  instance:</span><br><span class="line">    prefer-ip-address: true</span><br><span class="line">    instance-id: $&#123;spring.cloud.client.ip-address&#125;:$&#123;server.port&#125;</span><br><span class="line">  client:</span><br><span class="line">    service-url:</span><br><span class="line">      defaultZone: http://localhost:8090/eureka/</span><br></pre></td></tr></table></figure><h4 id="3-实体映射"><a href="#3-实体映射" class="headerlink" title="3.实体映射"></a>3.实体映射</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@Data</span><br><span class="line">@Document(indexName = &quot;javayh&quot;,type = &quot;sys_es&quot;)</span><br><span class="line">public class EsEntiy implements Serializable &#123;</span><br><span class="line">    @Id</span><br><span class="line">    private String esId;</span><br><span class="line">    @Field(type = FieldType.Text)</span><br><span class="line">    private String esIndex;</span><br><span class="line">    @Field(type = FieldType.Text)</span><br><span class="line">    private String esType;</span><br><span class="line">    @Field(type = FieldType.Text)</span><br><span class="line">    private String esCode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-Repository-JPA的封装"><a href="#4-Repository-JPA的封装" class="headerlink" title="4.Repository JPA的封装"></a>4.Repository JPA的封装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@Repository</span><br><span class="line">public interface EsRepository extends ElasticsearchRepository&lt;EsEntiy,String&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-EsService"><a href="#5-EsService" class="headerlink" title="5.EsService"></a>5.EsService</h4><p>这里包含了新增、普通的查询、模糊查询、高亮检索</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line">@Service</span><br><span class="line">public class EsService &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private EsRepository esRepository;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private ElasticsearchTemplate elasticsearchTemplate;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 保存</span><br><span class="line">     * @param esEntiy</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public EsEntiy save(EsEntiy esEntiy)&#123;</span><br><span class="line">        if (StringUtils.isEmpty(esEntiy.getEsCode()))</span><br><span class="line">            throw new BaseException(&quot;eslasticsearch code is null&quot;);</span><br><span class="line">        esEntiy.setEsId(UuidUtils.getUuid());</span><br><span class="line">        return esRepository.save(esEntiy);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 查询</span><br><span class="line">     * @param code</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public EsEntiy findbyEs(String code)&#123;</span><br><span class="line">        Optional&lt;EsEntiy&gt; byId = esRepository.findById(code);</span><br><span class="line">        return byId.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 删除</span><br><span class="line">     * @param id</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public int delete(String id)&#123;</span><br><span class="line">        if(StringUtils.isEmpty(id))</span><br><span class="line">            esRepository.deleteById(id);</span><br><span class="line">        EsEntiy esEntiy = esRepository.findById(id).get();</span><br><span class="line">        return  esEntiy == null ? 0: 1 ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * matchQuery       : 单个字段查询</span><br><span class="line">     * matchAllQuery    : 匹配所有</span><br><span class="line">     * multiMatchQuery  : 多个字段匹配某一个值</span><br><span class="line">     * wildcardQuery    : 模糊查询</span><br><span class="line">     * boost            : 设置权重,数值越大权重越大</span><br><span class="line">     * 混合搜索</span><br><span class="line">     * @param content</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public Page&lt;EsEntiy&gt; querySearch(String content)&#123;</span><br><span class="line">        DisMaxQueryBuilder disMaxQueryBuilder = QueryBuilders.disMaxQuery();</span><br><span class="line">        QueryBuilder ikTypeQuery = QueryBuilders.matchQuery(&quot;esType&quot;, content).boost(2f);</span><br><span class="line">        QueryBuilder pinyinTypeQuery = QueryBuilders.matchQuery(&quot;esType.pinyin&quot;, content);</span><br><span class="line">        QueryBuilder ikCodeQuery = QueryBuilders.matchQuery(&quot;esCode&quot;, content).boost(2f);</span><br><span class="line">        QueryBuilder pinyinCodeQuery = QueryBuilders.matchQuery(&quot;esCode.pinyin&quot;, content);</span><br><span class="line">        QueryBuilder wildcardCodeQuery = QueryBuilders.wildcardQuery(&quot;esCode&quot;, content);</span><br><span class="line">        QueryBuilder multiCodeQuery = QueryBuilders.multiMatchQuery(content,&quot;esType&quot;,&quot;esCode&quot;);</span><br><span class="line">        disMaxQueryBuilder.add(ikTypeQuery);</span><br><span class="line">        disMaxQueryBuilder.add(pinyinTypeQuery);</span><br><span class="line">        disMaxQueryBuilder.add(ikCodeQuery);</span><br><span class="line">        disMaxQueryBuilder.add(pinyinCodeQuery);</span><br><span class="line">        disMaxQueryBuilder.add(wildcardCodeQuery);</span><br><span class="line">        disMaxQueryBuilder.add(multiCodeQuery);</span><br><span class="line">        SearchQuery searchQuery = new NativeSearchQueryBuilder()</span><br><span class="line">                .withQuery(disMaxQueryBuilder).build();</span><br><span class="line">        Page&lt;EsEntiy&gt; search = esRepository.search(searchQuery);</span><br><span class="line">        return search;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 高亮检索</span><br><span class="line">     * @param type</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public AggregatedPage&lt;EsEntiy&gt; querySearchType(String type)&#123;</span><br><span class="line">        DisMaxQueryBuilder disMaxQueryBuilder = QueryBuilders.disMaxQuery();</span><br><span class="line">        QueryBuilder ikTypeQuery = QueryBuilders.wildcardQuery(&quot;esType&quot;, type).boost(2f);</span><br><span class="line">        QueryBuilder ikCodeQuery = QueryBuilders.wildcardQuery(&quot;esCode&quot;, type).boost(2f);</span><br><span class="line">        List&lt;String&gt; highlightFields = new ArrayList&lt;String&gt;();</span><br><span class="line">        highlightFields.add(&quot;esType&quot;);</span><br><span class="line">        highlightFields.add(&quot;esCode&quot;);</span><br><span class="line">        HighlightBuilder.Field[] fields = new HighlightBuilder.Field[highlightFields.size()];</span><br><span class="line">        for (int x = 0; x &lt; highlightFields.size(); x++) &#123;</span><br><span class="line">            fields[x] = new HighlightBuilder.Field(highlightFields.get(x)).preTags(EsHighlight.HIGH_LIGHT_START_TAG)</span><br><span class="line">                    .postTags(EsHighlight.HIGH_LIGHT_END_TAG);</span><br><span class="line">        &#125;</span><br><span class="line">        disMaxQueryBuilder.add(ikTypeQuery);</span><br><span class="line">        disMaxQueryBuilder.add(ikCodeQuery);</span><br><span class="line">        SearchQuery searchQuery = new NativeSearchQueryBuilder()</span><br><span class="line">                .withQuery(disMaxQueryBuilder)</span><br><span class="line">                .withHighlightFields(fields)</span><br><span class="line">                //.withPageable(PageRequest.of(1, 10))</span><br><span class="line">                .build();</span><br><span class="line">        //不需要高亮就直接分页返回</span><br><span class="line">        //Page&lt;EsEntiy&gt; esEntiys = esRepository.search(searchQuery);</span><br><span class="line">        //高亮显示</span><br><span class="line">        AggregatedPage&lt;EsEntiy&gt; esEntiys = elasticsearchTemplate.queryForPage(searchQuery, EsEntiy.class, new SearchResultMapper() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public &lt;T&gt; AggregatedPage&lt;T&gt; mapResults(SearchResponse searchResponse, Class&lt;T&gt; aClass, Pageable pageable) &#123;</span><br><span class="line">                pageable = PageRequest.of(1, 10);</span><br><span class="line">                List&lt;EsEntiy&gt; chunk = new ArrayList&lt;&gt;();</span><br><span class="line">                for (SearchHit searchHit : searchResponse.getHits()) &#123;</span><br><span class="line">                    if (searchResponse.getHits().getHits().length &lt;= 0) &#123;</span><br><span class="line">                        return null;</span><br><span class="line">                    &#125;</span><br><span class="line">                    EsEntiy esEntiy = new EsEntiy();</span><br><span class="line">                    esEntiy.setEsId(searchHit.getId());</span><br><span class="line">                    esEntiy.setEsIndex(searchHit.getIndex());</span><br><span class="line">                    //name or memoe</span><br><span class="line">                    HighlightField code = searchHit.getHighlightFields().get(&quot;esCode&quot;);</span><br><span class="line">                    if (code != null) &#123;</span><br><span class="line">                        esEntiy.setEsCode(code.fragments()[0].toString());</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        Object esCode = searchHit.getSourceAsMap().get(&quot;esCode&quot;);</span><br><span class="line">                        if(esCode == null)</span><br><span class="line">                            esEntiy.setEsCode(&quot;&quot;);</span><br><span class="line">                        else</span><br><span class="line">                            esEntiy.setEsCode(esCode.toString());</span><br><span class="line">                    &#125;</span><br><span class="line">                    HighlightField type = searchHit.getHighlightFields().get(&quot;esType&quot;);</span><br><span class="line">                    if (type != null) &#123;</span><br><span class="line">                        esEntiy.setEsType(type.fragments()[0].toString());</span><br><span class="line">                    &#125;else &#123;</span><br><span class="line">                        Object esType = searchHit.getSourceAsMap().get(&quot;esType&quot;);</span><br><span class="line">                        if(esType == null )</span><br><span class="line">                            esEntiy.setEsType(&quot;&quot;);</span><br><span class="line">                        else</span><br><span class="line">                            esEntiy.setEsType(esType.toString());</span><br><span class="line">                    &#125;</span><br><span class="line">                    chunk.add(esEntiy);</span><br><span class="line">                &#125;</span><br><span class="line">                if (chunk.size() &gt; 0) &#123;</span><br><span class="line">                    return  new AggregatedPageImpl&lt;T&gt;((List&lt;T&gt;) chunk);</span><br><span class="line">                &#125;</span><br><span class="line">                return null;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        return esEntiys;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-高亮配置"><a href="#6-高亮配置" class="headerlink" title="6. 高亮配置"></a>6. 高亮配置</h4><p>承接上边的代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public interface EsHighlight &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 高亮显示 - 开始标签</span><br><span class="line">     */</span><br><span class="line">    String HIGH_LIGHT_START_TAG = &quot;&lt;javayh&gt;&quot;;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 高亮显示 - 结束标签</span><br><span class="line">     */</span><br><span class="line">    String HIGH_LIGHT_END_TAG = &quot;&lt;/javayh&gt;&quot;;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 索引名称</span><br><span class="line">     */</span><br><span class="line">    class INDEX_NAME &#123;</span><br><span class="line">        /**</span><br><span class="line">         * 游记</span><br><span class="line">         */</span><br><span class="line">        public static final String TRAVEL = &quot;travel&quot;;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h3><h4 id="1-新增"><a href="#1-新增" class="headerlink" title="1.新增"></a>1.新增</h4><p><img src="https://img-blog.csdnimg.cn/20190625183146125.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zODkzNzg0MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>我们可以通过es-head进行查看<br><img src="https://img-blog.csdnimg.cn/20190625183046566.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zODkzNzg0MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="2-高亮检索"><a href="#2-高亮检索" class="headerlink" title="2. 高亮检索"></a>2. 高亮检索</h4><p><img src="https://img-blog.csdnimg.cn/20190625183325334.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zODkzNzg0MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>可以看出已经将我们的搜索条件“测”，进行了高亮显示<br>boot2.X整合es已经完成，希望对看到的朋友有所帮助！<br>如有疑问可以添加小编微信：372787553,互相交流！</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Elasticsearch-安装&quot;&gt;&lt;a href=&quot;#Elasticsearch-安装&quot; class=&quot;headerlink&quot; title=&quot;Elasticsearch 安装&quot;&gt;&lt;/a&gt;Elasticsearch 安装&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;具体安装步骤网上很多，大家可以借鉴一下；&lt;br&gt;关于分词插件的安装可以执行一下命令:&lt;br&gt;拼音插件&lt;br&gt;./bin/elasticsearch-plugin install &lt;a href=&quot;https://github.com/medcl/elasticsearch-analysis-pinyin/releases/download/v6.1.1/elasticsearch-analysis-pinyin-6.1.1.zip&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/medcl/elasticsearch-analysis-pinyin/releases/download/v6.1.1/elasticsearch-analysis-pinyin-6.1.1.zip&lt;/a&gt;&lt;br&gt;中文插件&lt;br&gt; ./bin/elasticsearch-plugin install &lt;a href=&quot;https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v6.1.1/elasticsearch-analysis-ik-6.1.1.zip&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v6.1.1/elasticsearch-analysis-ik-6.1.1.zip&lt;/a&gt;&lt;br&gt;如不行执行在线下载，也可以离线下载&lt;br&gt;放在安装 elasticsearch 下plugins内即可&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="微服务" scheme="http://yoursite.com/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>Dubbo+Boot下的分布式治理</title>
    <link href="http://yoursite.com/2019/07/15/Dubbo+Boot%E4%B8%8B%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E6%B2%BB%E7%90%86/"/>
    <id>http://yoursite.com/2019/07/15/Dubbo+Boot下的分布式治理/</id>
    <published>2019-07-15T10:46:11.000Z</published>
    <updated>2019-07-15T11:09:40.563Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Dubbo背景"><a href="#Dubbo背景" class="headerlink" title="Dubbo背景"></a>Dubbo背景</h2><p>随着Internet的快速发展，Web应用程序的规模不断扩大，最终我们发现传统的垂直架构（单片机）无法再处理这个问题。分布式服务架构和流量计算架构势在必行，迫切需要一个治理系统来确保架构的有序演进。<br><img src="https://img-blog.csdnimg.cn/20190712111732968.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zODkzNzg0MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><a id="more"></a><p><strong>单片架构</strong><br>当流量非常低时，只有一个应用程序，所有功能都部署在一起，以减少部署节点和成本。此时，数据访问框架（ORM）是简化CRUD工作负载的关键。</p><p><strong>垂直建筑</strong><br>当流量变大时，添加单片应用程序实例无法很好地加速访问，提高效率的一种方法是将单片机拆分为离散应用程序。此时，用于加速前端页面开发的Web框架（MVC）是关键。</p><p><strong>分布式服务架构</strong><br>当越来越多的垂直应用程序，应用程序之间的交互是不可避免的，一些核心业务被提取并作为独立服务，逐步形成一个稳定的服务中心，这样前端应用程序可以更多地响应市场需求的变化很快。此时，用于业务重用和集成的分布式服务框架（RPC）是关键。</p><p><strong>流量计算架构</strong><br>当服务越来越多时，容量评估变得困难，小规模的服务也经常导致资源浪费。为了解决这些问题，应该添加一个调度中心来管理基于流量的集群容量，并提高集群的利用率。此时，用于提高机器利用率的资源调度和治理中心（SOA）是关键。</p><p>以上来自官方介绍</p><h2 id="Dubbo版本介绍"><a href="#Dubbo版本介绍" class="headerlink" title="Dubbo版本介绍"></a>Dubbo版本介绍</h2><p>已发布最新版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.apache.dubbo&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;dubbo-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.7.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>历史版本<br><img src="https://img-blog.csdnimg.cn/20190712112523991.png" alt="在这里插入图片描述"><br>在最新版本的整合时会有些错误，还需要结合官方解决方案，本文采用的是历史版本</p><h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><p><img src="https://img-blog.csdnimg.cn/20190712125308518.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zODkzNzg0MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="相关依赖"><a href="#相关依赖" class="headerlink" title="相关依赖"></a>相关依赖</h2><h4 id="父POM"><a href="#父POM" class="headerlink" title="父POM"></a>父POM</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;com.javayh&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;javayh-cloud&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">        &lt;relativePath&gt;../&lt;/relativePath&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;groupId&gt;com.javayh&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;javayh-dubbo&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;name&gt;javayh-dubbo&lt;/name&gt;</span><br><span class="line">    &lt;description&gt;Demo project for Spring Boot&lt;/description&gt;</span><br><span class="line"></span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class="line">        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class="line">        &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;</span><br><span class="line">        &lt;dubbo.version&gt;0.2.0&lt;/dubbo.version&gt;</span><br><span class="line">        &lt;zk.version&gt;0.1&lt;/zk.version&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.javayh&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;javayh-commons&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">        &lt;/plugins&gt;</span><br><span class="line">    &lt;/build&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><h4 id="公用资源"><a href="#公用资源" class="headerlink" title="公用资源"></a>公用资源</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;com.javayh&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;javayh-dubbo&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">        &lt;relativePath&gt;../&lt;/relativePath&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;groupId&gt;com.javayh&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;javayh-dubbo-api&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;name&gt;javayh-dubbo-api&lt;/name&gt;</span><br><span class="line">    &lt;packaging&gt;jar&lt;/packaging&gt;</span><br><span class="line">    &lt;description&gt;javayh-dubbo-api&lt;/description&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        </span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><h4 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;com.javayh&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;javayh-dubbo&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">        &lt;relativePath&gt;../&lt;/relativePath&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;groupId&gt;com.javayh&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;javayh-dubbo-server&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;name&gt;javayh-dubbo-server&lt;/name&gt;</span><br><span class="line">    &lt;packaging&gt;jar&lt;/packaging&gt;</span><br><span class="line">    &lt;description&gt;javayh-dubbo-server&lt;/description&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.javayh&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;javayh-dubbo-api&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!-- springboot集成dubbo的起步依赖 --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.alibaba.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;dubbo-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;dubbo.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!--引入zookeeper的客户端工具--&gt;</span><br><span class="line">        &lt;!-- https://mvnrepository.com/artifact/com.github.sgroschupf/zkclient --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.github.sgroschupf&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;zkclient&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;zk.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><h4 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;com.javayh&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;javayh-dubbo&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">        &lt;relativePath&gt;../&lt;/relativePath&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;groupId&gt;com.javayh&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;javayh-dubbo-client&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;name&gt;javayh-dubbo-client&lt;/name&gt;</span><br><span class="line">    &lt;packaging&gt;jar&lt;/packaging&gt;</span><br><span class="line">    &lt;description&gt;javayh-dubbo-client&lt;/description&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.javayh&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;javayh-dubbo-api&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!-- springboot集成dubbo的起步依赖 --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.alibaba.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;dubbo-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;dubbo.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!--引入zookeeper的客户端工具--&gt;</span><br><span class="line">        &lt;!-- https://mvnrepository.com/artifact/com.github.sgroschupf/zkclient --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.github.sgroschupf&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;zkclient&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;zk.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><h4 id="消费者-1"><a href="#消费者-1" class="headerlink" title="消费者"></a>消费者</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: javayh-dubbo-client</span><br><span class="line"></span><br><span class="line">server:</span><br><span class="line">  port: 8022</span><br><span class="line">dubbo:</span><br><span class="line">  application:</span><br><span class="line">    name: javayh-dubbo-client</span><br><span class="line">  registry:</span><br><span class="line">    address: zookeeper://127.0.0.1:2181</span><br><span class="line">  monitor:</span><br><span class="line">    protocol: registry</span><br></pre></td></tr></table></figure><h4 id="生产者-1"><a href="#生产者-1" class="headerlink" title="生产者"></a>生产者</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8021</span><br><span class="line"></span><br><span class="line">dubbo:</span><br><span class="line">  application:</span><br><span class="line">    name: javayh-dubbo-server</span><br><span class="line">  registry:</span><br><span class="line">    protocol: zookeeper</span><br><span class="line">    address: 127.0.0.1:2181</span><br><span class="line">  #通信规则（通信协议和接口）</span><br><span class="line">  protocol:</span><br><span class="line">    name: dubbo</span><br><span class="line">    port: 20880</span><br><span class="line">  monitor:</span><br><span class="line">    protocol: registry</span><br><span class="line">#开启包扫描，可替代 @EnableDubbo 注解</span><br><span class="line">#  scan:</span><br><span class="line">#    base-packages: com.javayh</span><br></pre></td></tr></table></figure><h2 id="RPC流程"><a href="#RPC流程" class="headerlink" title="RPC流程"></a>RPC流程</h2><blockquote><p>1.在公用资源内声明接口<br>2.在生产者内实现<br>3.在消费者内调用<br>注：采用ZK注册中心</p></blockquote><h4 id="公用API"><a href="#公用API" class="headerlink" title="公用API"></a>公用API</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public interface  ApiService &#123;</span><br><span class="line"></span><br><span class="line">    ApiDubbo save();</span><br><span class="line"></span><br><span class="line">    String findProt(String prot);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="生产者-2"><a href="#生产者-2" class="headerlink" title="生产者"></a>生产者</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">//这里的@Service注解是Dubbo内的，一定要引用对，</span><br><span class="line">//关于版本号，如果生产者定义，消费者也必须采用相同的版本号</span><br><span class="line">@Service(version = &quot;javayh-0.1&quot;,interfaceClass = ApiService.class)</span><br><span class="line">public class ApiServer implements ApiService&#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public ApiDubbo save() &#123;</span><br><span class="line">        ApiDubbo apiDubbo = new ApiDubbo.ApiDubboBuilder().</span><br><span class="line">                setApiName(&quot;javayh-dubbo-api&quot;).</span><br><span class="line">                setApiType(&quot;AipDubbo.class&quot;).</span><br><span class="line">                setApiUrl(&quot;javayh/dubbo/api/save&quot;).build();</span><br><span class="line">        return apiDubbo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String findProt(String prot) &#123;</span><br><span class="line">        return prot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="消费者-2"><a href="#消费者-2" class="headerlink" title="消费者"></a>消费者</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">@RequestMapping(value = &quot;/javayh/dubbo/api/&quot;)</span><br><span class="line">public class AipController &#123;</span><br><span class="line"></span><br><span class="line">    @Reference(version = &quot;javayh-0.1&quot;)</span><br><span class="line">    private ApiService apiService;</span><br><span class="line"></span><br><span class="line">    @GetMapping(value = &quot;save&quot;)</span><br><span class="line">    public Result save()&#123;</span><br><span class="line">        ApiDubbo apiDubbo1 = apiService.save();</span><br><span class="line">        return Result.javaYhInsertSuccess(apiDubbo1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @GetMapping(value = &quot;ip/&#123;prot&#125;&quot;)</span><br><span class="line">    public Result findProt(@PathVariable String prot)&#123;</span><br><span class="line">        return Result.javaYhInsertSuccess(apiService.findProt(prot));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@EnableDubbo  //也可以在配置文件内配置，生产者、消费者都需要配置</span><br><span class="line">@SpringBootApplication</span><br><span class="line">public class ServerApplication &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(ServerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="服务访问"><a href="#服务访问" class="headerlink" title="服务访问"></a>服务访问</h4><p><img src="https://img-blog.csdnimg.cn/2019071213190743.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zODkzNzg0MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>此时服务已经调通</p><h2 id="Dubbo-Admin"><a href="#Dubbo-Admin" class="headerlink" title="Dubbo-Admin"></a>Dubbo-Admin</h2><p>启动admin后可以观察到，我们现在的服务，说明配置正确<br><img src="https://img-blog.csdnimg.cn/2019071213221377.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zODkzNzg0MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="安装Admin方式："><a href="#安装Admin方式：" class="headerlink" title="安装Admin方式："></a>安装Admin方式：</h4><h4 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h4><p>最新的Admin采用的是前后端分离技术，需要单独部署</p><h5 id="生产环境配置"><a href="#生产环境配置" class="headerlink" title="生产环境配置"></a>生产环境配置</h5><ol><li><p>下载代码: <code>git clone https://github.com/apache/dubbo-admin.git</code></p></li><li><p>在 <code>dubbo-admin-server/src/main/resources/application.properties</code>中指定注册中心地址</p></li><li><p>构建</p><blockquote><ul><li><code>mvn clean package</code>  </li></ul></blockquote></li><li><p>启动 </p><ul><li><code>mvn --projects dubbo-admin-server spring-boot:run</code><br>或者   </li><li><code>cd dubbo-admin-distribution/target; java -jar dubbo-admin-0.1.jar</code></li></ul></li><li><p>访问 <code>http://localhost:8080</code></p></li></ol><hr><h5 id="开发环境配置"><a href="#开发环境配置" class="headerlink" title="开发环境配置"></a>开发环境配置</h5><ul><li>运行<code>dubbo admin server</code><br> <code>dubbo admin server</code>是一个标准的spring boot项目, 可以在任何java IDE中运行它</li><li>运行<code>dubbo admin ui</code><br><code>dubbo admin ui</code>由npm管理和构建，在开发环境中，可以单独运行: <code>npm run dev</code></li><li>页面访问<br>访问 <code>http://localhost:8081</code>, 由于前后端分开部署，前端支持热加载，任何页面的修改都可以实时反馈，不需要重启应用。<ul><li>跨域问题<br>为了方便开发，我们提供了这种前后端分离的部署模式，主要的好处是支持前端热部署，在这种模式下，前端会通过8080端口访问后端的restful api接口，获取数据, 这将导致跨域访问的问题。因此我们在<code>dubbo-admin-ui/config/index.js</code>添加了支持跨域访问的配置,当前端通过<code>npm run dev</code>单独启动时，这些配置将被激活，允许跨域访问</li></ul></li></ul><h5 id="Swagger-支持"><a href="#Swagger-支持" class="headerlink" title="Swagger 支持"></a>Swagger 支持</h5><p>部署完成后，可以访问 <a href="http://localhost:8080/swagger-ui.html" target="_blank" rel="noopener">http://localhost:8080/swagger-ui.html</a> 来查看所有的restful api</p><h4 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h4><p>方式二安装简单，前后端没有分离，直接启动即可</p><ul><li>步骤1：<br>git clone <a href="https://github.com/apache/incubator-dubbo-ops" target="_blank" rel="noopener">https://github.com/apache/incubator-dubbo-ops</a></li><li>第2步：<br>cd incubator-dubbo-ops &amp;&amp; mvn package</li></ul><p>这里只需要将Admin的配置内的ZK改成自己的即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">server.port=7001</span><br><span class="line">spring.velocity.cache=false</span><br><span class="line">spring.velocity.charset=UTF-8</span><br><span class="line">spring.velocity.layout-url=/templates/default.vm</span><br><span class="line">spring.messages.fallback-to-system-locale=false</span><br><span class="line">spring.messages.basename=i18n/message</span><br><span class="line">spring.root.password=root</span><br><span class="line">spring.guest.password=guest</span><br><span class="line"></span><br><span class="line">dubbo.registry.address=zookeeper://127.0.0.1:2181</span><br></pre></td></tr></table></figure><p>希望对大家有所帮助，欢迎点赞转发！</p><blockquote><p>这是本文的代码地址<br><a href="https://github.com/Dylan-haiji/javayh-cloud/tree/javayh-dubbo/javayh-dubbo" target="_blank" rel="noopener">https://github.com/Dylan-haiji/javayh-cloud/tree/javayh-dubbo/javayh-dubbo</a><br>欢迎各位star</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Dubbo背景&quot;&gt;&lt;a href=&quot;#Dubbo背景&quot; class=&quot;headerlink&quot; title=&quot;Dubbo背景&quot;&gt;&lt;/a&gt;Dubbo背景&lt;/h2&gt;&lt;p&gt;随着Internet的快速发展，Web应用程序的规模不断扩大，最终我们发现传统的垂直架构（单片机）无法再处理这个问题。分布式服务架构和流量计算架构势在必行，迫切需要一个治理系统来确保架构的有序演进。&lt;br&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20190712111732968.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zODkzNzg0MA==,size_16,color_FFFFFF,t_70&quot; alt=&quot;在这里插入图片描述&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>OAuth2实现单点登录</title>
    <link href="http://yoursite.com/2019/07/15/OAuth2%E5%AE%9E%E7%8E%B0%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95/"/>
    <id>http://yoursite.com/2019/07/15/OAuth2实现单点登录/</id>
    <published>2019-07-15T10:46:11.000Z</published>
    <updated>2019-07-15T11:11:24.281Z</updated>
    
    <content type="html"><![CDATA[<h2 id="OAuth2-权限统一验证"><a href="#OAuth2-权限统一验证" class="headerlink" title="OAuth2 权限统一验证"></a>OAuth2 权限统一验证</h2><h3 id="OAuth2简介"><a href="#OAuth2简介" class="headerlink" title="OAuth2简介"></a>OAuth2简介</h3><blockquote><p>OAuth2.0是OAuth协议的延续版本，但不向后兼容OAuth 2.0即完全废止了OAuth1.0。 OAuth<br>2.0关注客户端开发者的简易性。要么通过组织在资源拥有者和HTTP服务商之间的被批准的交互动作代表用户，要么允许第三方应用代表用户获得访问的权限</p></blockquote><h2 id="关键名词"><a href="#关键名词" class="headerlink" title="关键名词"></a>关键名词</h2><blockquote><p>在详细讲解OAuth 2.0之前，需要了解几个专用名词。它们对读懂后面的讲解，尤其是几张图，至关重要。<br>（1） Third-party application：第三方应用程序，<br>（2）HTTP service：HTTP服务提供商，本文中简称”服务提供商”，<br>    （3）Resource Owner：资源所有者     </p></blockquote><a id="more"></a><blockquote><p>（4）User Agent：用户代理，本文中就是指浏览器。<br>    （5）Authorization server：认证服务器，即服务提供商专门用来处理认证的服务器<br>（6）Resource server：资源服务器，即服务提供商存放用户生成的资源的服务器。它与认证服务器，可以是同一台服务器，也可以是不同的服务器。<br>    知道了上面这些名词，就不难理解，OAuth的作用就是让”客户端”安全可控地获取”用户”的授权，与”服务商提供商”进行互动。<br>    <strong>以上摘自大佬的博客，接下来我们就开始实战</strong></p></blockquote><p><strong>本篇文章篇幅过程，还请耐心观看！如有不适，请多喝烫水！</strong></p><h2 id="项目整体架构"><a href="#项目整体架构" class="headerlink" title="项目整体架构"></a>项目整体架构</h2><h4 id="项目蓝图"><a href="#项目蓝图" class="headerlink" title="项目蓝图"></a>项目蓝图</h4><p><img src="https://img-blog.csdnimg.cn/20190518205748170.png" alt="在这里插入图片描述"></p><blockquote><p> <strong>javayh-eureka</strong>– 服务注册中心<br>  <strong>javayh-oauth</strong>  – 认证服务器<br>   <strong>javayh-shop</strong> – 资源服务器<br>    <strong>javayh-zuul</strong>  – 路由中心</p></blockquote><h2 id="核心配置"><a href="#核心配置" class="headerlink" title="核心配置"></a>核心配置</h2><p>这里主要说认证证服务器，路由的配置</p><h3 id="路由配置"><a href="#路由配置" class="headerlink" title="路由配置"></a>路由配置</h3><h5 id="yaml配置"><a href="#yaml配置" class="headerlink" title="yaml配置"></a>yaml配置</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8091</span><br><span class="line"></span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: javayh-zuul</span><br><span class="line"></span><br><span class="line">#--------------------eureka---------------------</span><br><span class="line">eureka:</span><br><span class="line">  instance:</span><br><span class="line">    prefer-ip-address: true</span><br><span class="line">    instance-id: $&#123;spring.cloud.client.ip-address&#125;:$&#123;server.port&#125;</span><br><span class="line">  client:</span><br><span class="line">    service-url:</span><br><span class="line">      defaultZone: http://localhost:8090/eureka/</span><br><span class="line"></span><br><span class="line">#--------------------Zuul-----------------------</span><br><span class="line">zuul:</span><br><span class="line">  routes:</span><br><span class="line">    member:</span><br><span class="line">      path: /member/**</span><br><span class="line">      serviceId: javayh-shop</span><br><span class="line">      sensitiveHeaders: &quot;*&quot;</span><br><span class="line">    auth:</span><br><span class="line">      path: /auth/**</span><br><span class="line">      serviceId: javayh-oauth</span><br><span class="line">      sensitiveHeaders: &quot;*&quot;</span><br><span class="line">  retryable: false</span><br><span class="line">  ignored-services: &quot;*&quot;</span><br><span class="line">  ribbon:</span><br><span class="line">    eager-load:</span><br><span class="line">      enabled: true</span><br><span class="line">  host:</span><br><span class="line">    connect-timeout-millis: 60000</span><br><span class="line">    socket-timeout-millis: 60000</span><br><span class="line">  add-proxy-headers: true</span><br><span class="line"></span><br><span class="line">#---------------------OAuth2---------------------</span><br><span class="line">security:</span><br><span class="line">  oauth2:</span><br><span class="line">    client:</span><br><span class="line">      access-token-uri: http://localhost:$&#123;server.port&#125;/auth/oauth/token</span><br><span class="line">      user-authorization-uri: http://localhost:$&#123;server.port&#125;/auth/oauth/authorize</span><br><span class="line">      client-id: web</span><br><span class="line">    resource:</span><br><span class="line">      user-info-uri:  http://localhost:$&#123;server.port&#125;/auth/javayh/member</span><br><span class="line">      prefer-token-info: false</span><br><span class="line"></span><br><span class="line">#----------------------超时配置-------------------</span><br><span class="line">ribbon:</span><br><span class="line">  ReadTimeout: 60000</span><br><span class="line">  ConnectTimeout: 60000</span><br><span class="line">  MaxAutoRetries: 2</span><br><span class="line">  MaxAutoRetriesNextServer: 2</span><br><span class="line">  eureka:</span><br><span class="line">    enabled: true</span><br><span class="line">hystrix:</span><br><span class="line">  command:</span><br><span class="line">    default:</span><br><span class="line">      execution:</span><br><span class="line">        timeout:</span><br><span class="line">          enabled: true</span><br><span class="line">        isolation:</span><br><span class="line">          thread:</span><br><span class="line">            timeoutInMilliseconds: 60000</span><br></pre></td></tr></table></figure><h5 id="pom配置"><a href="#pom配置" class="headerlink" title="pom配置"></a>pom配置</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;com.javayh&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;javayh-oauth2&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;groupId&gt;com.javayh&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;javayh-zuul&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;name&gt;javayh-zuul&lt;/name&gt;</span><br><span class="line">    &lt;description&gt;javayh-zuul&lt;/description&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-netflix-zuul&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-oauth2&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-security&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">        &lt;/plugins&gt;</span><br><span class="line">    &lt;/build&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><h5 id="Security配置"><a href="#Security配置" class="headerlink" title="Security配置"></a>Security配置</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">@EnableWebSecurity</span><br><span class="line">@Order(99)//必加</span><br><span class="line">public class SecurityConfig extends WebSecurityConfigurerAdapter &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 禁止csrf</span><br><span class="line">     * @param http</span><br><span class="line">     * @throws Exception</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    protected void configure(HttpSecurity http) throws Exception &#123;</span><br><span class="line">        http.csrf().disable();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="认证服务器配置"><a href="#认证服务器配置" class="headerlink" title="认证服务器配置"></a>认证服务器配置</h2><h4 id="yaml"><a href="#yaml" class="headerlink" title="yaml"></a>yaml</h4><p>摘取自某位大佬的，讲解很详细</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8092</span><br><span class="line"></span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: javayh-oauth</span><br><span class="line">  redis:</span><br><span class="line">    database: 0</span><br><span class="line">    host: localhost</span><br><span class="line">    port: 6379</span><br><span class="line">    password:</span><br><span class="line">    jedis:</span><br><span class="line">      pool:</span><br><span class="line">        max-active: 8</span><br><span class="line">        max-idle: 8</span><br><span class="line">        min-idle: 0</span><br><span class="line">  datasource:</span><br><span class="line">    driver-class-name: com.mysql.jdbc.Driver</span><br><span class="line">    url: jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false&amp;allowMultiQueries=true</span><br><span class="line">    username: root</span><br><span class="line">    password: 1219320</span><br><span class="line">  druid:</span><br><span class="line">    initialSize: 5 #初始化连接大小</span><br><span class="line">    minIdle: 5     #最小连接池数量</span><br><span class="line">    maxActive: 20  #最大连接池数量</span><br><span class="line">    maxWait: 60000 #获取连接时最大等待时间，单位毫秒</span><br><span class="line">    timeBetweenEvictionRunsMillis: 60000 #配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒</span><br><span class="line">    minEvictableIdleTimeMillis: 300000   #配置一个连接在池中最小生存的时间，单位是毫秒</span><br><span class="line">    validationQuery: SELECT 1 from DUAL  #测试连接</span><br><span class="line">    testWhileIdle: true                  #申请连接的时候检测，建议配置为true，不影响性能，并且保证安全性</span><br><span class="line">    testOnBorrow: false                  #获取连接时执行检测，建议关闭，影响性能</span><br><span class="line">    testOnReturn: false                  #归还连接时执行检测，建议关闭，影响性能</span><br><span class="line">    poolPreparedStatements: false        #是否开启PSCache，PSCache对支持游标的数据库性能提升巨大，oracle建议开启，mysql下建议关闭</span><br><span class="line">    maxPoolPreparedStatementPerConnectionSize: 20 #开启poolPreparedStatements后生效</span><br><span class="line">    filters: stat,wall,log4j #配置扩展插件，常用的插件有=&gt;stat:监控统计  log4j:日志  wall:防御sql注入</span><br><span class="line">    connectionProperties: &apos;druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000&apos; #通过connectProperties属性来打开mergeSql功能;慢SQL记录</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">eureka:</span><br><span class="line">  instance:</span><br><span class="line">    prefer-ip-address: true</span><br><span class="line">    instance-id: $&#123;spring.cloud.client.ip-address&#125;:$&#123;server.port&#125;</span><br><span class="line">  client:</span><br><span class="line">    service-url:</span><br><span class="line">      defaultZone: http://localhost:8090/eureka/</span><br><span class="line"></span><br><span class="line">mybatis:</span><br><span class="line">  type-aliases-package: com.javayh.entity</span><br><span class="line">  configuration:</span><br><span class="line">    map-underscore-to-camel-case: true  #开启驼峰命名,l_name -&gt; lName</span><br><span class="line">    jdbc-type-for-null: NULL</span><br><span class="line">    lazy-loading-enabled: true</span><br><span class="line">    aggressive-lazy-loading: true</span><br><span class="line">    cache-enabled: true #开启二级缓存</span><br><span class="line">    call-setters-on-nulls: true #map空列不显示问题</span><br><span class="line">  mapper-locations:</span><br><span class="line">  - classpath:mybatis/*.xml</span><br></pre></td></tr></table></figure><h5 id="pom配置-1"><a href="#pom配置-1" class="headerlink" title="pom配置"></a>pom配置</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;com.javayh&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;javayh-oauth2&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;groupId&gt;com.javayh&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;javayh-oauth&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;name&gt;javayh-oauth&lt;/name&gt;</span><br><span class="line">    &lt;description&gt;ojavayh-oauth&lt;/description&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-oauth2&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-security&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.3.2&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;5.1.46&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;druid&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.1.9&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;log4j&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;log4j&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.2.17&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">        &lt;/plugins&gt;</span><br><span class="line">    &lt;/build&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><p>接下来是重点配置</p><h5 id="DruidConfiguration"><a href="#DruidConfiguration" class="headerlink" title="DruidConfiguration"></a>DruidConfiguration</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line">@Slf4j</span><br><span class="line">@Configuration</span><br><span class="line">public class DruidConfiguration &#123;</span><br><span class="line">    @Value(&quot;$&#123;spring.datasource.url&#125;&quot;)</span><br><span class="line">    private String url;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;spring.datasource.username&#125;&quot;)</span><br><span class="line">    private String username;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;spring.datasource.password&#125;&quot;)</span><br><span class="line">    private String password;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;spring.datasource.driver-class-name&#125;&quot;)</span><br><span class="line">    private String driverClassName;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;spring.druid.initialSize&#125;&quot;)</span><br><span class="line">    private int initialSize;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;spring.druid.minIdle&#125;&quot;)</span><br><span class="line">    private int minIdle;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;spring.druid.maxActive&#125;&quot;)</span><br><span class="line">    private int maxActive;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;spring.druid.maxWait&#125;&quot;)</span><br><span class="line">    private int maxWait;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;spring.druid.timeBetweenEvictionRunsMillis&#125;&quot;)</span><br><span class="line">    private int timeBetweenEvictionRunsMillis;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;spring.druid.minEvictableIdleTimeMillis&#125;&quot;)</span><br><span class="line">    private int minEvictableIdleTimeMillis;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;spring.druid.validationQuery&#125;&quot;)</span><br><span class="line">    private String validationQuery;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;spring.druid.testWhileIdle&#125;&quot;)</span><br><span class="line">    private boolean testWhileIdle;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;spring.druid.testOnBorrow&#125;&quot;)</span><br><span class="line">    private boolean testOnBorrow;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;spring.druid.testOnReturn&#125;&quot;)</span><br><span class="line">    private boolean testOnReturn;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;spring.druid.poolPreparedStatements&#125;&quot;)</span><br><span class="line">    private boolean poolPreparedStatements;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;spring.druid.maxPoolPreparedStatementPerConnectionSize&#125;&quot;)</span><br><span class="line">    private int maxPoolPreparedStatementPerConnectionSize;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;spring.druid.filters&#125;&quot;)</span><br><span class="line">    private String filters;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;&#123;spring.druid.connectionProperties&#125;&quot;)</span><br><span class="line">    private String connectionProperties;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    @Primary</span><br><span class="line">    public DataSource dataSource() &#123;</span><br><span class="line">        DruidDataSource datasource = new DruidDataSource();</span><br><span class="line">        datasource.setUrl(url);</span><br><span class="line">        datasource.setUsername(username);</span><br><span class="line">        //这里可以做加密处理</span><br><span class="line">        datasource.setPassword(password);</span><br><span class="line">        datasource.setDriverClassName(driverClassName);</span><br><span class="line">        //configuration</span><br><span class="line">        datasource.setInitialSize(initialSize);</span><br><span class="line">        datasource.setMinIdle(minIdle);</span><br><span class="line">        datasource.setMaxActive(maxActive);</span><br><span class="line">        datasource.setMaxWait(maxWait);</span><br><span class="line">        datasource.setTimeBetweenEvictionRunsMillis(timeBetweenEvictionRunsMillis);</span><br><span class="line">        datasource.setMinEvictableIdleTimeMillis(minEvictableIdleTimeMillis);</span><br><span class="line">        datasource.setValidationQuery(validationQuery);</span><br><span class="line">        datasource.setTestWhileIdle(testWhileIdle);</span><br><span class="line">        datasource.setTestOnBorrow(testOnBorrow);</span><br><span class="line">        datasource.setTestOnReturn(testOnReturn);</span><br><span class="line">        datasource.setPoolPreparedStatements(poolPreparedStatements);</span><br><span class="line">        datasource.setMaxPoolPreparedStatementPerConnectionSize(maxPoolPreparedStatementPerConnectionSize);</span><br><span class="line">        try &#123;</span><br><span class="line">            datasource.setFilters(filters);</span><br><span class="line">        &#125; catch (SQLException e) &#123;</span><br><span class="line">            log.info(&quot;连接异常&quot;+e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        datasource.setConnectionProperties(connectionProperties);</span><br><span class="line">        return datasource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public FilterRegistrationBean statFilter() &#123;</span><br><span class="line">        //创建过滤器</span><br><span class="line">        FilterRegistrationBean filterRegistrationBean = new FilterRegistrationBean(new WebStatFilter());</span><br><span class="line">        //设置过滤器过滤路径</span><br><span class="line">        filterRegistrationBean.addUrlPatterns(&quot;/*&quot;);</span><br><span class="line">        //忽略过滤的形式</span><br><span class="line">        filterRegistrationBean.addInitParameter(&quot;exclusions&quot;, &quot;*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*&quot;);</span><br><span class="line">        return filterRegistrationBean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="AuthorizationServerConfig"><a href="#AuthorizationServerConfig" class="headerlink" title="AuthorizationServerConfig"></a>AuthorizationServerConfig</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">@EnableAuthorizationServer</span><br><span class="line">public class AuthorizationServerConfig  extends AuthorizationServerConfigurerAdapter &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private AuthenticationManager authenticationManager;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private DataSource dataSource;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private RedisConnectionFactory redisConnectionFactory;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private MyUserDetailService userDetailService;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public TokenStore tokenStore() &#123;</span><br><span class="line">        return new RedisTokenStore(redisConnectionFactory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void configure(AuthorizationServerSecurityConfigurer security) throws Exception &#123;</span><br><span class="line">        security</span><br><span class="line">                .allowFormAuthenticationForClients()</span><br><span class="line">                .tokenKeyAccess(&quot;permitAll()&quot;)</span><br><span class="line">                .checkTokenAccess(&quot;isAuthenticated()&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void configure(ClientDetailsServiceConfigurer clients) throws Exception &#123;</span><br><span class="line">        // clients.withClientDetails(clientDetails());</span><br><span class="line">        clients.inMemory()</span><br><span class="line">                .withClient(&quot;android&quot;)</span><br><span class="line">                .scopes(&quot;read&quot;)</span><br><span class="line">                .secret(&quot;android&quot;)</span><br><span class="line">                .authorizedGrantTypes(&quot;password&quot;, &quot;authorization_code&quot;, &quot;refresh_token&quot;)</span><br><span class="line">                .and()</span><br><span class="line">                .withClient(&quot;webapp&quot;)</span><br><span class="line">                .scopes(&quot;read&quot;)</span><br><span class="line">                .authorizedGrantTypes(&quot;implicit&quot;)</span><br><span class="line">                .and()</span><br><span class="line">                .withClient(&quot;browser&quot;)</span><br><span class="line">                .authorizedGrantTypes(&quot;refresh_token&quot;, &quot;password&quot;)</span><br><span class="line">                .scopes(&quot;read&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    @Bean</span><br><span class="line">    public ClientDetailsService clientDetails() &#123;</span><br><span class="line">        return new JdbcClientDetailsService(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public WebResponseExceptionTranslator webResponseExceptionTranslator()&#123;</span><br><span class="line">        return new JavaYhWebException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void configure(AuthorizationServerEndpointsConfigurer endpoints) throws Exception &#123;</span><br><span class="line">        endpoints.tokenStore(tokenStore())</span><br><span class="line">                .userDetailsService(userDetailService)</span><br><span class="line">                .authenticationManager(authenticationManager);</span><br><span class="line">        endpoints.tokenServices(defaultTokenServices());</span><br><span class="line">        //认证异常翻译</span><br><span class="line">        endpoints.exceptionTranslator(webResponseExceptionTranslator());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * &lt;p&gt;注意，自定义TokenServices的时候，需要设置@Primary，否则报错，&lt;/p&gt;</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @Primary</span><br><span class="line">    @Bean</span><br><span class="line">    public DefaultTokenServices defaultTokenServices()&#123;</span><br><span class="line">        DefaultTokenServices tokenServices = new DefaultTokenServices();</span><br><span class="line">        tokenServices.setTokenStore(tokenStore());</span><br><span class="line">        tokenServices.setSupportRefreshToken(true);</span><br><span class="line">        //tokenServices.setClientDetailsService(clientDetails());</span><br><span class="line">        // token有效期自定义设置，默认12小时</span><br><span class="line">        tokenServices.setAccessTokenValiditySeconds(60*60*12);</span><br><span class="line">        // refresh_token默认30天</span><br><span class="line">        tokenServices.setRefreshTokenValiditySeconds(60 * 60 * 24 * 7);</span><br><span class="line">        return tokenServices;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="ResourceServerConfig"><a href="#ResourceServerConfig" class="headerlink" title="ResourceServerConfig"></a>ResourceServerConfig</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">@EnableResourceServer</span><br><span class="line">@Order(3)</span><br><span class="line">public class ResourceServerConfig extends ResourceServerConfigurerAdapter &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void configure(HttpSecurity http) throws Exception &#123;</span><br><span class="line">        http</span><br><span class="line">                .csrf().disable()</span><br><span class="line">                .exceptionHandling()</span><br><span class="line">                .authenticationEntryPoint((request, response, authException) -&gt; response.sendError(HttpServletResponse.SC_UNAUTHORIZED))</span><br><span class="line">                .and()</span><br><span class="line">                .requestMatchers().antMatchers(&quot;/javayh/**&quot;)</span><br><span class="line">                .and()</span><br><span class="line">                .authorizeRequests()</span><br><span class="line">                .antMatchers(&quot;/javayh/**&quot;).authenticated()</span><br><span class="line">                .and()</span><br><span class="line">                .httpBasic();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="SecurityConfig"><a href="#SecurityConfig" class="headerlink" title="SecurityConfig"></a>SecurityConfig</h5><p>@Configuration<br>@EnableWebSecurity<br>@Order(2)<br>public class SecurityConfig extends WebSecurityConfigurerAdapter {<br>    @Autowired<br>    private MyUserDetailService userDetailService;</p><pre><code>@Beanpublic PasswordEncoder passwordEncoder() {    //return new BCryptPasswordEncoder();    return new NoEncryptPasswordEncoder();}@Overrideprotected void configure(HttpSecurity http) throws Exception {    http.requestMatchers().antMatchers(&quot;/oauth/**&quot;)            .and()            .authorizeRequests()            .antMatchers(&quot;/oauth/**&quot;).authenticated()            .and()            .csrf().disable();}@Overrideprotected void configure(AuthenticationManagerBuilder auth) throws Exception {    auth.userDetailsService(userDetailService).passwordEncoder(passwordEncoder());}/** * 不定义没有password grant_type,密码模式需要AuthenticationManager支持 * * @return * @throws Exception */@Override@Beanpublic AuthenticationManager authenticationManagerBean() throws Exception {    return super.authenticationManagerBean();}</code></pre><p>}</p><h5 id="NoEncryptPasswordEncoder"><a href="#NoEncryptPasswordEncoder" class="headerlink" title="NoEncryptPasswordEncoder"></a>NoEncryptPasswordEncoder</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class NoEncryptPasswordEncoder implements PasswordEncoder &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String encode(CharSequence charSequence) &#123;</span><br><span class="line">        return (String) charSequence;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean matches(CharSequence charSequence, String s) &#123;</span><br><span class="line">        return s.equals((String) charSequence);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>特别强调：<br>本文中用的RedisTokenStore是重写，负责会报RedisConnection set时错误，一下是区别</strong><br>左侧为重写的后的方法，在Spring5以后需要重写<br><img src="https://img-blog.csdnimg.cn/20190518212659154.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zODkzNzg0MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="验证效果"><a href="#验证效果" class="headerlink" title="验证效果"></a>验证效果</h2><h6 id="获取token"><a href="#获取token" class="headerlink" title="获取token"></a>获取token</h6><p>这里的username，password是读取的数据库<br><img src="https://img-blog.csdnimg.cn/20190518212923952.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zODkzNzg0MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h6 id="无token时访问"><a href="#无token时访问" class="headerlink" title="无token时访问"></a>无token时访问</h6><p><img src="https://img-blog.csdnimg.cn/20190518213010700.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zODkzNzg0MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>提示我们没有权限访问</p><h6 id="携带token访问"><a href="#携带token访问" class="headerlink" title="携带token访问"></a>携带token访问</h6><p>展示出admin用户拥有的权限<br><img src="https://img-blog.csdnimg.cn/20190518213125943.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zODkzNzg0MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h6 id="携带token但无权访问时"><a href="#携带token但无权访问时" class="headerlink" title="携带token但无权访问时"></a>携带token但无权访问时</h6><p>我们给此路径配置的hello权限，但admin并无hello的权限<br><img src="https://img-blog.csdnimg.cn/20190518213354435.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zODkzNzg0MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190518213515242.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zODkzNzg0MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h6 id="token的存储"><a href="#token的存储" class="headerlink" title="token的存储"></a>token的存储</h6><p><img src="https://img-blog.csdnimg.cn/20190518214006757.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zODkzNzg0MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>大家看着是不是很眼熟<img src="https://img-blog.csdnimg.cn/2019051821412453.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zODkzNzg0MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这些key都是在我们重写时定义的！</p><p>至此SpringCloud + OAith2统一权限验证就完成了！</p><p>同时欢迎大家关注小编的公众号《JAVA有货》</p><blockquote><p>这是本文的代码地址<br><a href="https://github.com/Dylan-haiji/javayh-cloud" target="_blank" rel="noopener">https://github.com/Dylan-haiji/javayh-cloud</a><br>欢迎各位star</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;OAuth2-权限统一验证&quot;&gt;&lt;a href=&quot;#OAuth2-权限统一验证&quot; class=&quot;headerlink&quot; title=&quot;OAuth2 权限统一验证&quot;&gt;&lt;/a&gt;OAuth2 权限统一验证&lt;/h2&gt;&lt;h3 id=&quot;OAuth2简介&quot;&gt;&lt;a href=&quot;#OAuth2简介&quot; class=&quot;headerlink&quot; title=&quot;OAuth2简介&quot;&gt;&lt;/a&gt;OAuth2简介&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;OAuth2.0是OAuth协议的延续版本，但不向后兼容OAuth 2.0即完全废止了OAuth1.0。 OAuth&lt;br&gt;2.0关注客户端开发者的简易性。要么通过组织在资源拥有者和HTTP服务商之间的被批准的交互动作代表用户，要么允许第三方应用代表用户获得访问的权限&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;关键名词&quot;&gt;&lt;a href=&quot;#关键名词&quot; class=&quot;headerlink&quot; title=&quot;关键名词&quot;&gt;&lt;/a&gt;关键名词&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;在详细讲解OAuth 2.0之前，需要了解几个专用名词。它们对读懂后面的讲解，尤其是几张图，至关重要。&lt;br&gt;（1） Third-party application：第三方应用程序，&lt;br&gt;（2）HTTP service：HTTP服务提供商，本文中简称”服务提供商”，&lt;br&gt;    （3）Resource Owner：资源所有者     &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="微服务" scheme="http://yoursite.com/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>JAVA多线程创建及使用</title>
    <link href="http://yoursite.com/2019/07/15/JAVA%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%88%9B%E5%BB%BA%E5%8F%8A%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2019/07/15/JAVA多线程创建及使用/</id>
    <published>2019-07-15T06:46:11.000Z</published>
    <updated>2019-07-15T15:00:35.490Z</updated>
    
    <content type="html"><![CDATA[<h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><blockquote><p>Java 给多线程编程提供了内置的支持。 一条线程指的是进程中一个单一顺序的控制流，一个进程中可以并发多个线程，每条线程并行执行不同的任务。</p><p>多线程是多任务的一种特别的形式，但多线程使用了更小的资源开销。</p><p>这里定义和线程相关的另一个术语 -<br>进程：一个进程包括由操作系统分配的内存空间，包含一个或多个线程。一个线程不能独立的存在，它必须是进程的一部分。一个进程一直运行，直到所有的非守护线程都结束运行后才能结束。</p><p>多线程能满足程序员编写高效率的程序来达到充分利用 CPU 的目的。</p></blockquote><a id="more"></a><h2 id="线程的生命周期"><a href="#线程的生命周期" class="headerlink" title="线程的生命周期"></a>线程的生命周期</h2><blockquote><p>线程是一个动态执行的过程，它也有一个从产生到死亡的过程。</p><p>下图显示了一个线程完整的生命周期。<br><img src="https://img-blog.csdnimg.cn/20190620233343544.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zODkzNzg0MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></blockquote><h6 id="以上介绍来源于菜鸟教程，下面我们将进行多线程的使用，在这里如果多多线程并不了解的同鞋，请自行百度一下！"><a href="#以上介绍来源于菜鸟教程，下面我们将进行多线程的使用，在这里如果多多线程并不了解的同鞋，请自行百度一下！" class="headerlink" title="以上介绍来源于菜鸟教程，下面我们将进行多线程的使用，在这里如果多多线程并不了解的同鞋，请自行百度一下！"></a>以上介绍来源于菜鸟教程，下面我们将进行多线程的使用，在这里如果多多线程并不了解的同鞋，请自行百度一下！</h6><h2 id="创建线程池"><a href="#创建线程池" class="headerlink" title="创建线程池"></a>创建线程池</h2><blockquote><p>这里为何要创建线程池呢？这好像还是面试官经常问的问题！<br>其实明白为何创建书库连接池就明白为何创建线程池了，道理其实差不多，都是为了减小服务的开销！<br>创建的方式很多，这里小编讲解两种方式</p></blockquote><h3 id="1-基于JDK创建"><a href="#1-基于JDK创建" class="headerlink" title="1. 基于JDK创建"></a>1. 基于JDK创建</h3><h5 id="1-1-创建"><a href="#1-1-创建" class="headerlink" title="1.1 创建"></a>1.1 创建</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@Bean</span><br><span class="line">public ExecutorService getExecutorTools()&#123;</span><br><span class="line">        // 获取计算机有几个核</span><br><span class="line">        int processors = Runtime.getRuntime().availableProcessors();</span><br><span class="line">        ExecutorService executorService = Executors.newFixedThreadPool(processors * 5);</span><br><span class="line">        return  executorService;</span><br><span class="line">&#125;</span><br><span class="line">这里有四大种类方式供我们选项</span><br><span class="line"> 1. newFixedThreadPool//指定大小</span><br><span class="line"> 2. newCachedThreadPool//缓存类型，大小不受限制</span><br><span class="line"> 3. newSingleThreadExecutor//单线程化</span><br><span class="line"> 4. newScheduleThreadPool//带有生命周期的</span><br></pre></td></tr></table></figure><h5 id="1-2-使用"><a href="#1-2-使用" class="headerlink" title="1.2 使用"></a>1.2 使用</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">@Autowired</span><br><span class="line">private ExecutorService executorService;</span><br><span class="line">    </span><br><span class="line">public void deleteFutureJdk(String id) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            executorService.execute(new Runnable() &#123;</span><br><span class="line">                @Override</span><br><span class="line">                public void run() &#123;</span><br><span class="line">                    int i = sysMeunMapper.deleteByIds(id);</span><br><span class="line">                    log.info(&quot;delete num : &quot; + i);</span><br><span class="line">                    log.info(&quot;thread id : &quot; + Thread.currentThread().getId());</span><br><span class="line">                    log.info(&quot;thread name : &quot; + Thread.currentThread().getName());</span><br><span class="line">                    log.info(&quot;thread thread group : &quot; + Thread.currentThread().getThreadGroup());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;catch (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;finally &#123;</span><br><span class="line">            executorService.shutdown();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  //可以写一个for循环进行测试，通过log输出，查看线程使用的情况</span><br></pre></td></tr></table></figure><h3 id="2-基于Spring创建"><a href="#2-基于Spring创建" class="headerlink" title="2. 基于Spring创建"></a>2. 基于Spring创建</h3><h5 id="2-1-创建"><a href="#2-1-创建" class="headerlink" title="2.1. 创建"></a>2.1. 创建</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">@EnableAsync</span><br><span class="line">@Configuration</span><br><span class="line">@ComponentScan(value = &quot;com.javayh.service&quot;)</span><br><span class="line">public class ExecutorConfig implements AsyncConfigurer &#123;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public Executor getAsyncExecutor() &#123;</span><br><span class="line">        ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();</span><br><span class="line">        //配置核心线程数</span><br><span class="line">        executor.setCorePoolSize(5);</span><br><span class="line">        //配置最大线程数</span><br><span class="line">        executor.setMaxPoolSize(10);</span><br><span class="line">        //配置队列大小</span><br><span class="line">        executor.setQueueCapacity(400);</span><br><span class="line">        //配置线程池中的线程的名称前缀</span><br><span class="line">        executor.setThreadNamePrefix(&quot;javayh-&quot;);</span><br><span class="line">        // rejection-policy：当pool已经达到max size的时候，如何处理新任务</span><br><span class="line">        // CALLER_RUNS：不在新线程中执行任务，而是有调用者所在的线程来执行</span><br><span class="line">        executor.setRejectedExecutionHandler(new ThreadPoolExecutor.CallerRunsPolicy());</span><br><span class="line">        //执行初始化</span><br><span class="line">        executor.initialize();</span><br><span class="line">        return executor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public AsyncUncaughtExceptionHandler getAsyncUncaughtExceptionHandler() &#123;</span><br><span class="line">        return AsyncConfigurer.super.getAsyncUncaughtExceptionHandler();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-2-使用"><a href="#2-2-使用" class="headerlink" title="2.2 使用"></a>2.2 使用</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Async</span><br><span class="line">   public Future&lt;List&lt;SysMenu&gt;&gt; queryFuture() &#123;</span><br><span class="line">       Future&lt;List&lt;SysMenu&gt;&gt; future = new AsyncResult&lt;&gt;(sysMeunMapper.selectAll());</span><br><span class="line">       return future;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h3><p>我们写一个简单的for循环进行调用，效果如下图<br><img src="https://img-blog.csdnimg.cn/20190621002223727.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zODkzNzg0MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>从图上可以看出，每次的调用都属于不同的线程来进行操作；</p><h4 id="今天的分享到这里就结束了，不足之处还请多多包涵"><a href="#今天的分享到这里就结束了，不足之处还请多多包涵" class="headerlink" title="今天的分享到这里就结束了，不足之处还请多多包涵"></a>今天的分享到这里就结束了，不足之处还请多多包涵</h4><h4 id="如有帮助还请给小编点赞"><a href="#如有帮助还请给小编点赞" class="headerlink" title="如有帮助还请给小编点赞"></a>如有帮助还请给小编点赞</h4><blockquote><p>这是本文的代码地址<br><a href="https://github.com/Dylan-haiji/javayh-cloud" target="_blank" rel="noopener">https://github.com/Dylan-haiji/javayh-cloud</a><br>欢迎各位star</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;多线程&quot;&gt;&lt;a href=&quot;#多线程&quot; class=&quot;headerlink&quot; title=&quot;多线程&quot;&gt;&lt;/a&gt;多线程&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Java 给多线程编程提供了内置的支持。 一条线程指的是进程中一个单一顺序的控制流，一个进程中可以并发多个线程，每条线程并行执行不同的任务。&lt;/p&gt;
&lt;p&gt;多线程是多任务的一种特别的形式，但多线程使用了更小的资源开销。&lt;/p&gt;
&lt;p&gt;这里定义和线程相关的另一个术语 -&lt;br&gt;进程：一个进程包括由操作系统分配的内存空间，包含一个或多个线程。一个线程不能独立的存在，它必须是进程的一部分。一个进程一直运行，直到所有的非守护线程都结束运行后才能结束。&lt;/p&gt;
&lt;p&gt;多线程能满足程序员编写高效率的程序来达到充分利用 CPU 的目的。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Mysql + Mybatis实现乐观锁</title>
    <link href="http://yoursite.com/2019/07/15/Mysql+Mybatis%E4%B9%90%E8%A7%82%E9%94%81/"/>
    <id>http://yoursite.com/2019/07/15/Mysql+Mybatis乐观锁/</id>
    <published>2019-07-15T06:46:11.000Z</published>
    <updated>2019-07-15T11:04:15.579Z</updated>
    
    <content type="html"><![CDATA[<h2 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h2><h4 id="Mysql-Mybatis实现乐观锁"><a href="#Mysql-Mybatis实现乐观锁" class="headerlink" title="Mysql + Mybatis实现乐观锁"></a>Mysql + Mybatis实现乐观锁</h4><h4 id="1-案例sql"><a href="#1-案例sql" class="headerlink" title="1.案例sql"></a>1.案例sql</h4><pre><code>SET FOREIGN_KEY_CHECKS=0;-- ------------------------------ Table structure for sys_order-- ----------------------------DROP TABLE IF EXISTS `sys_order`;CREATE TABLE `sys_order` (  `order_num` varchar(255) NOT NULL COMMENT &apos;订单号&apos;,  `order_name` varchar(255) DEFAULT NULL COMMENT &apos;订单名称&apos;,  `order_type` varchar(255) DEFAULT NULL COMMENT &apos;订单状态&apos;,  `order_quantity` varchar(255) DEFAULT NULL COMMENT &apos;订单数量&apos;,  `version` int(11) DEFAULT &apos;1&apos; COMMENT &apos;版本号&apos;,  PRIMARY KEY (`order_num`)) ENGINE=InnoDB DEFAULT CHARSET=utf8;</code></pre> <a id="more"></a>   <pre><code>-- ------------------------------ Records of sys_order-- ----------------------------INSERT INTO `sys_order` VALUES (&apos;123456fdxw3456&apos;, &apos;秒杀&apos;, &apos;已付款&apos;, &apos;1&apos;, &apos;1&apos;);INSERT INTO `sys_order` VALUES (&apos;1234td&apos;, &apos;双十一&apos;, &apos;代发货&apos;, &apos;22&apos;, &apos;1&apos;);</code></pre><h4 id="Dao创建"><a href="#Dao创建" class="headerlink" title="Dao创建"></a>Dao创建</h4><pre><code>public interface SysOrderMapper extends BaseMapper&lt;SysOrder&gt; {    int updateLock(SysOrder sysOrder);}</code></pre><h4 id="Mapper文件"><a href="#Mapper文件" class="headerlink" title="Mapper文件"></a>Mapper文件</h4><pre><code>&lt;update id=&quot;updateLock&quot; parameterType=&quot;com.javayh.entity.SysOrder&quot;&gt;        update          sys_order        set          order_type=#{orderType},          version= version+1        where          order_num=#{orderNum}        and          version = #{version}    &lt;/update&gt;</code></pre><h4 id="Service实现"><a href="#Service实现" class="headerlink" title="Service实现"></a>Service实现</h4><pre><code>@Servicepublic class SysOrderServiceImpl extends ServiceImpl&lt;SysOrderMapper, SysOrder&gt; implements ISysOrderService {    @Autowired    private SysOrderMapper sysOrderMapper;    @Override    public int updateLock(SysOrder sysOrder) {        return sysOrderMapper.updateLock(sysOrder);    }}</code></pre><h4 id="接口调用"><a href="#接口调用" class="headerlink" title="接口调用"></a>接口调用</h4><pre><code>@Autowired    private SysOrderMapper sysOrderMapper;    @Autowired    private ISysOrderService sysOrderService;    /**     * 流程：     * 1.根据订单号查询出订单     * 2.修改订单的某个值，这里存在并发     * 3.修改时判断版本号，如果这是有其他的线程已修改，     * 则本次修改失败，若无修改，则修改成功；对应本案例的order1 与 order2     * 此方法的实现主要是跟根据version字段进行区分，     * 若version以被修改，where version 时无匹配的字段，自然失败     */    @GetMapping(value = &quot;test&quot;)    public void contextLoads() {        //1.查询        SysOrder sysOrder1 = sysOrderMapper.selectById(&quot;123456fdxw3456&quot;);        System.out.println(sysOrder1);        //SysOrder(orderNum=123456fdxw3456, orderName=秒杀, orderType=秒杀, orderQuantity=1, version=1)        SysOrder sysOrder2 = sysOrderMapper.selectById(&quot;123456fdxw3456&quot;);        System.out.println(sysOrder2);        //SysOrder(orderNum=123456fdxw3456, orderName=秒杀, orderType=秒杀, orderQuantity=1, version=1)        //2.修改字段        sysOrder1.setOrderType(&quot;买一赠一&quot;);        System.out.println(sysOrder1);        //SysOrder(orderNum=123456fdxw3456, orderName=秒杀, orderType=买一赠一, orderQuantity=1, version=1)        sysOrder2.setOrderType(&quot;买五赠一&quot;);        System.out.println(sysOrder2);        //SysOrder(orderNum=123456fdxw3456, orderName=秒杀, orderType=买五赠一, orderQuantity=1, version=1)        //3.执行修改        int order1 = sysOrderService.updateLock(sysOrder1);        SysOrder sysOrder3 = sysOrderMapper.selectById(&quot;123456fdxw3456&quot;);        System.out.println(sysOrder3);        System.out.println(order1&gt;0 ? &quot;成功&quot;:&quot;失败&quot;);        /**         * SysOrder(orderNum=123456fdxw3456, orderName=秒杀, orderType=买一赠一, orderQuantity=1, version=2)         * 成功         * SysOrder(orderNum=123456fdxw3456, orderName=秒杀, orderType=买一赠一, orderQuantity=1, version=2)         * 失败         */        int order2 = sysOrderService.updateLock(sysOrder2);        SysOrder sysOrder4 = sysOrderMapper.selectById(&quot;123456fdxw3456&quot;);        System.out.println(sysOrder4);        System.out.println(order2&gt;0 ? &quot;成功&quot;:&quot;失败&quot;);    }</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;乐观锁&quot;&gt;&lt;a href=&quot;#乐观锁&quot; class=&quot;headerlink&quot; title=&quot;乐观锁&quot;&gt;&lt;/a&gt;乐观锁&lt;/h2&gt;&lt;h4 id=&quot;Mysql-Mybatis实现乐观锁&quot;&gt;&lt;a href=&quot;#Mysql-Mybatis实现乐观锁&quot; class=&quot;headerlink&quot; title=&quot;Mysql + Mybatis实现乐观锁&quot;&gt;&lt;/a&gt;Mysql + Mybatis实现乐观锁&lt;/h4&gt;&lt;h4 id=&quot;1-案例sql&quot;&gt;&lt;a href=&quot;#1-案例sql&quot; class=&quot;headerlink&quot; title=&quot;1.案例sql&quot;&gt;&lt;/a&gt;1.案例sql&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;SET FOREIGN_KEY_CHECKS=0;

-- ----------------------------
-- Table structure for sys_order
-- ----------------------------
DROP TABLE IF EXISTS `sys_order`;
CREATE TABLE `sys_order` (
  `order_num` varchar(255) NOT NULL COMMENT &amp;apos;订单号&amp;apos;,
  `order_name` varchar(255) DEFAULT NULL COMMENT &amp;apos;订单名称&amp;apos;,
  `order_type` varchar(255) DEFAULT NULL COMMENT &amp;apos;订单状态&amp;apos;,
  `order_quantity` varchar(255) DEFAULT NULL COMMENT &amp;apos;订单数量&amp;apos;,
  `version` int(11) DEFAULT &amp;apos;1&amp;apos; COMMENT &amp;apos;版本号&amp;apos;,
  PRIMARY KEY (`order_num`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>Docker从安装到入门到项目部署</title>
    <link href="http://yoursite.com/2019/07/15/Docker%E4%BB%8E%E5%AE%89%E8%A3%85%E5%88%B0%E5%85%A5%E9%97%A8%E5%88%B0%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/"/>
    <id>http://yoursite.com/2019/07/15/Docker从安装到入门到项目部署/</id>
    <published>2019-07-15T06:46:11.000Z</published>
    <updated>2019-07-15T15:00:46.123Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Docker简介"><a href="#Docker简介" class="headerlink" title="Docker简介"></a>Docker简介</h2><blockquote><p>Docker Community<br>Edition（CE）非常适合希望开始使用Docker并尝试使用基于容器的应用程序的开发人员和小型团队。Docker<br>CE有三种类型的更新通道：stable，test和nightly： Stable为您提供一般可用性的最新版本。<br>测试提供在一般可用之前准备好进行测试的预发布。 Nightly为您提供下一个主要版本的最新正在进行的工作。 有关Docker<br>CE的更多信息，请参阅 Docker Community Edition。</p></blockquote><a id="more"></a><h2 id="Docker-Service"><a href="#Docker-Service" class="headerlink" title="Docker Service"></a>Docker Service</h2><p><img src="https://img-blog.csdnimg.cn/20190612232122189.png" alt="在这里插入图片描述"></p><blockquote><p>我们常用的服务器都可以安装Docker，只是Docker对服务器内核有要求，安装时需要先查看，下面会说到</p></blockquote><h2 id="Docker-安装"><a href="#Docker-安装" class="headerlink" title="Docker 安装"></a>Docker 安装</h2><blockquote><p>其实网上安装的步骤很多，也很详细，这里我就不多说了；<br>小编这里有的是ububtu-16；</p></blockquote><h4 id="1-ubuntu安装步骤"><a href="#1-ubuntu安装步骤" class="headerlink" title="1.ubuntu安装步骤"></a>1.ubuntu安装步骤</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># step 1: 安装必要的一些系统工具</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get -y install apt-transport-https ca-certificates curl software-properties-common</span><br><span class="line"># step 2: 安装GPG证书</span><br><span class="line">curl -fsSL http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -</span><br><span class="line"># Step 3: 写入软件源信息</span><br><span class="line">sudo add-apt-repository &quot;deb [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable&quot;</span><br><span class="line"># Step 4: 更新并安装Docker-CE</span><br><span class="line">sudo apt-get -y update</span><br><span class="line">sudo apt-get -y install docker-ce</span><br></pre></td></tr></table></figure><h4 id="安装校验"><a href="#安装校验" class="headerlink" title="安装校验"></a>安装校验</h4><blockquote><p>docker version<br><img src="https://img-blog.csdnimg.cn/20190612234501379.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zODkzNzg0MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></blockquote><h2 id="Docker-基本操作"><a href="#Docker-基本操作" class="headerlink" title="Docker 基本操作"></a>Docker 基本操作</h2><blockquote><p>1.镜像拉取<br>docker pull<br>如：docker pull mysql:5.6<br>如图则表示成功<br><img src="https://img-blog.csdnimg.cn/20190612235703338.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zODkzNzg0MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>2.镜像查询<br>docker image ls<br><img src="https://img-blog.csdnimg.cn/20190613000112298.png" alt="在这里插入图片描述"><br> 3.镜像删除<br>docker rmi<br>如：docker rmi mysql ;这里需要通过id进行删除<br>如图表示删除成功<br><img src="https://img-blog.csdnimg.cn/20190613000253631.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zODkzNzg0MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>4.docker 运行<br>如：docker run -d -p 91:80 nginx<br>命令解释：<br>docker  run 表示运行<br>-d 后台运行<br>-p 宿主机端口:容器端口<br><img src="https://img-blog.csdnimg.cn/20190613000610550.png" alt="在这里插入图片描述"><br>5.查看docker运行的容器<br>docker ps<br><img src="https://img-blog.csdnimg.cn/20190613000717517.png" alt="在这里插入图片描述"><br>通过上面的运行与查看表示我们早docker内已成功安装nginx并运行起来了；下面我们就访问以下;如图表示我们的服务已经运行起来了!<br><img src="https://img-blog.csdnimg.cn/20190613001102750.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zODkzNzg0MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>6.停止docker内的服务<br>docker stop<br>如图表示已经停止，我们再次访问<a href="http://192.168.21.137:91" target="_blank" rel="noopener">http://192.168.21.137:91</a> 发现服务不在了<br><img src="https://img-blog.csdnimg.cn/20190613001344484.png" alt="在这里插入图片描述"></p></blockquote><h2 id="Docker-部署SpringCloud项目"><a href="#Docker-部署SpringCloud项目" class="headerlink" title="Docker 部署SpringCloud项目"></a>Docker 部署SpringCloud项目</h2><h4 id="1-创建DockerFile"><a href="#1-创建DockerFile" class="headerlink" title="1.创建DockerFile"></a>1.创建DockerFile</h4><blockquote><p><img src="https://img-blog.csdnimg.cn/20190613003709664.png" alt="在这里插入图片描述"><br>Dockerfile 解释<br> 基于哪个镜像<br>From java:8<br> 复制文件到容器 ADD eureka-server.jar /app.jar<br>声明需要暴露的端口 EXPOSE 8761    # 微服务项目的启动端口<br>配置容器启动后执行的命令 ENTRYPOINT [“java”,”-jar”,”/app.jar”] 3、使用docker build命令构建镜像</p></blockquote><h4 id="2-发布服务"><a href="#2-发布服务" class="headerlink" title="2.发布服务"></a>2.发布服务</h4><blockquote><p>1、将jar包上传linux服务器/app/eureka目录，在jar包所在目录创建名为Dockerfile的文件<br> 2、docker build -t eureka-server:0.0.1 .<br>格式： docker build -t 镜像名称:标签 Dockerfile的相对位置 在这里，使用-t选项指定了镜像的标签。执行该命令后，终端将会输出如下的内容<br><img src="https://img-blog.csdnimg.cn/20190613004019726.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zODkzNzg0MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>3、docker run -p 8088:8088 eureka-server:0.0.1<img src="https://img-blog.csdnimg.cn/20190613004159967.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zODkzNzg0MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>4、验证是否启动成功<br><img src="https://img-blog.csdnimg.cn/20190613004512198.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zODkzNzg0MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>就此Docker安装到服务发布就讲解完成，不足之处，请多多指教</p></blockquote><p>有兴趣的朋友可以添加微信群，如果微信群过期，请联系小编二维码同下，也欢迎关注小编的微信公众号《JAVA有货》<br><img src="https://img-blog.csdnimg.cn/20190613005017168.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zODkzNzg0MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190613004848755.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zODkzNzg0MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190613005430453.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zODkzNzg0MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Docker简介&quot;&gt;&lt;a href=&quot;#Docker简介&quot; class=&quot;headerlink&quot; title=&quot;Docker简介&quot;&gt;&lt;/a&gt;Docker简介&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Docker Community&lt;br&gt;Edition（CE）非常适合希望开始使用Docker并尝试使用基于容器的应用程序的开发人员和小型团队。Docker&lt;br&gt;CE有三种类型的更新通道：stable，test和nightly： Stable为您提供一般可用性的最新版本。&lt;br&gt;测试提供在一般可用之前准备好进行测试的预发布。 Nightly为您提供下一个主要版本的最新正在进行的工作。 有关Docker&lt;br&gt;CE的更多信息，请参阅 Docker Community Edition。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="微服务" scheme="http://yoursite.com/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot + MybatisPlus实现敏捷开发</title>
    <link href="http://yoursite.com/2019/07/15/SpringBoot%20+%20MybatisPlus%E5%AE%9E%E7%8E%B0%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91/"/>
    <id>http://yoursite.com/2019/07/15/SpringBoot + MybatisPlus实现敏捷开发/</id>
    <published>2019-07-15T06:46:11.000Z</published>
    <updated>2019-07-16T04:49:36.438Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MyBatisPlus简洁"><a href="#MyBatisPlus简洁" class="headerlink" title="MyBatisPlus简洁"></a>MyBatisPlus简洁</h2><blockquote><p>MyBatis-Plus（简称 MP）是一个 MyBatis 的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。<br><strong>愿景</strong><br>我们的愿景是成为 MyBatis 最好的搭档，就像 魂斗罗 中的 1P、2P，基友搭配，效率翻倍。<img src="https://img-blog.csdnimg.cn/20190619172039860.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zODkzNzg0MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></blockquote><a id="more"></a><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><p><strong>无侵入</strong>：只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑<br><strong>损耗小</strong>：启动即会自动注入基本 CURD，性能基本无损耗，直接面向对象操作<br><strong>强大的 CRUD 操作</strong>：内置通用 Mapper、通用 Service，仅仅通过少量配置即可实现单表大部分 CRUD 操作，更有强大的条件构造器，满足各类使用需求<br>支持 Lambda 形式调用：通过 Lambda 表达式，方便的编写各类查询条件，无需再担心字段写错<br><strong>支持主键自动生成</strong>：支持多达 4 种主键策略（内含分布式唯一 ID 生成器 - Sequence），可自由配置，完美解决主键问题<br><strong>支持 ActiveRecord 模式</strong>：支持 ActiveRecord 形式调用，实体类只需继承 Model 类即可进行强大的 CRUD 操作<br><strong>支持自定义全局通用操作</strong>：支持全局通用方法注入（ Write once, use anywhere ）<br><strong>内置代码生成器</strong>：采用代码或者 Maven 插件可快速生成 Mapper 、 Model 、 Service 、 Controller 层代码，支持模板引擎，更有超多自定义配置等您来使用<br>内置分页插件：基于 MyBatis 物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同于普通 List 查询<br><strong>分页插件支持多种数据库</strong>：支持 MySQL、MariaDB、Oracle、DB2、H2、HSQL、SQLite、Postgre、SQLServer2005、SQLServer 等多种数据库<br><strong>内置性能分析插件</strong>：可输出 Sql 语句以及其执行时间，建议开发测试时启用该功能，能快速揪出慢查询<br><strong>内置全局拦截插件</strong>：提供全表 delete 、 update 操作智能分析阻断，也可自定义拦截规则，预防误操作<br>内置 Sql 注</p><h2 id="架构结构"><a href="#架构结构" class="headerlink" title="架构结构"></a>架构结构</h2><p><img src="https://img-blog.csdnimg.cn/20190619172538213.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zODkzNzg0MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>以上来源于官网，下面我们将介绍MyBatisPlus3.1.1与SpringBoot2.x的整个！</p><h2 id="SpringBoot与MyBatisPlus整合"><a href="#SpringBoot与MyBatisPlus整合" class="headerlink" title="SpringBoot与MyBatisPlus整合"></a>SpringBoot与MyBatisPlus整合</h2><h3 id="1-POM-xml配置"><a href="#1-POM-xml配置" class="headerlink" title="1. POM.xml配置"></a>1. POM.xml配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;com.javayh&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;javayh-oauth2&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">        &lt;relativePath&gt;../&lt;/relativePath&gt;&lt;!-- lookup parent from repository --&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;groupId&gt;com.javayh&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;javayh-mybatisplus&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;name&gt;javayh-mybatisplus&lt;/name&gt;</span><br><span class="line">    &lt;description&gt;Demo project for Spring Boot&lt;/description&gt;</span><br><span class="line"></span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.javayh&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;javayh-commons&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;mysql.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;druid&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;druid.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.baomidou&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;mybatis.puls.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.baomidou&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mybatis-plus-generator&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;mybatis.puls.generator.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.velocity&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;velocity-engine-core&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;velocity.engine.version&#125;&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">        &lt;/plugins&gt;</span><br><span class="line">    &lt;/build&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><h3 id="2-application-yml配置"><a href="#2-application-yml配置" class="headerlink" title="2. application.yml配置"></a>2. application.yml配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8097</span><br><span class="line"></span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: javayh-thread</span><br><span class="line">  datasource:</span><br><span class="line">    driver-class-name: com.mysql.jdbc.Driver</span><br><span class="line">    url: jdbc:mysql://localhost:3306/guns?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false&amp;allowMultiQueries=true</span><br><span class="line">    username: root</span><br><span class="line">    password: 1219320</span><br><span class="line">  druid:</span><br><span class="line">    initialSize: 5 #初始化连接大小</span><br><span class="line">    minIdle: 5     #最小连接池数量</span><br><span class="line">    maxActive: 20  #最大连接池数量</span><br><span class="line">    maxWait: 60000 #获取连接时最大等待时间，单位毫秒</span><br><span class="line">    timeBetweenEvictionRunsMillis: 60000 #配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒</span><br><span class="line">    minEvictableIdleTimeMillis: 300000   #配置一个连接在池中最小生存的时间，单位是毫秒</span><br><span class="line">    validationQuery: SELECT 1 from DUAL  #测试连接</span><br><span class="line">    testWhileIdle: true                  #申请连接的时候检测，建议配置为true，不影响性能，并且保证安全性</span><br><span class="line">    testOnBorrow: false                  #获取连接时执行检测，建议关闭，影响性能</span><br><span class="line">    testOnReturn: false                  #归还连接时执行检测，建议关闭，影响性能</span><br><span class="line">    poolPreparedStatements: false        #是否开启PSCache，PSCache对支持游标的数据库性能提升巨大，oracle建议开启，mysql下建议关闭</span><br><span class="line">    maxPoolPreparedStatementPerConnectionSize: 20 #开启poolPreparedStatements后生效</span><br><span class="line">    filters: stat,wall,log4j #配置扩展插件，常用的插件有=&gt;stat:监控统计  log4j:日志  wall:防御sql注入</span><br><span class="line">    connectionProperties: &apos;druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000&apos; #通过connectProperties属性来打开mergeSql功能;慢SQL记录</span><br><span class="line"></span><br><span class="line">mybatis-plus:</span><br><span class="line">  mapper-locations: classpath:/mapper/*Mapper.xml</span><br><span class="line">  global-config:</span><br><span class="line">      #刷新mapper 调试神器</span><br><span class="line">      db-config:</span><br><span class="line">        #主键类型  0:&quot;数据库ID自增&quot;, 1:&quot;用户输入ID&quot;,2:&quot;全局唯一ID (数字类型唯一ID)&quot;, 3:&quot;全局唯一ID UUID&quot;;</span><br><span class="line">        id-type: AUTO</span><br><span class="line">        #字段策略 0:&quot;忽略判断&quot;,1:&quot;非 NULL 判断&quot;),2:&quot;非空判断&quot;</span><br><span class="line">        field-strategy: not_empty</span><br><span class="line">        #驼峰下划线转换</span><br><span class="line">        column-underline: true</span><br><span class="line">        #数据库大写下划线转换</span><br><span class="line">        #capital-mode: true</span><br><span class="line">        #逻辑删除配置</span><br><span class="line">        logic-delete-value: 1</span><br><span class="line">        logic-not-delete-value: 0</span><br><span class="line">        db-type: mysql</span><br><span class="line">      refresh: true</span><br></pre></td></tr></table></figure><h3 id="3-MyBatisPlusConfig配置"><a href="#3-MyBatisPlusConfig配置" class="headerlink" title="3. MyBatisPlusConfig配置"></a>3. MyBatisPlusConfig配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">@EnableTransactionManagement</span><br><span class="line">@Configuration</span><br><span class="line">@MapperScan(&quot;com.javayh.mapper&quot;)</span><br><span class="line">public class MybatisPlusConfig &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 分页插件</span><br><span class="line">     */</span><br><span class="line">    @Bean</span><br><span class="line">    public PaginationInterceptor paginationInterceptor() &#123;</span><br><span class="line">        return new PaginationInterceptor();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * sql注入器  逻辑删除插件</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @Bean</span><br><span class="line">    public ISqlInjector iSqlInjector()&#123;</span><br><span class="line">        return new LogicSqlInjector();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * sql性能分析插件，输出sql语句及所需时间</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @Bean</span><br><span class="line">    @Profile(&#123;&quot;dev&quot;,&quot;test&quot;&#125;)// 设置 dev test 环境开启</span><br><span class="line">    public PerformanceInterceptor performanceInterceptor() &#123;</span><br><span class="line">        return new PerformanceInterceptor();</span><br><span class="line">    &#125;</span><br><span class="line">    /**</span><br><span class="line">     * 乐观锁插件</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public OptimisticLockerInterceptor optimisticLockerInterceptor()&#123;</span><br><span class="line">        return new OptimisticLockerInterceptor();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">//    @Bean</span><br><span class="line">//    public PaginationInterceptor paginationInterceptor() &#123;</span><br><span class="line">//        PaginationInterceptor paginationInterceptor = new PaginationInterceptor();</span><br><span class="line">//        List&lt;ISqlParser&gt; sqlParserList = new ArrayList&lt;&gt;();</span><br><span class="line">//        // 攻击 SQL 阻断解析器、加入解析链</span><br><span class="line">//        sqlParserList.add(new BlockAttackSqlParser());</span><br><span class="line">//        paginationInterceptor.setSqlParserList(sqlParserList);</span><br><span class="line">//        return paginationInterceptor;</span><br><span class="line">//    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 打印 sql</span><br><span class="line">     */</span><br><span class="line">//    @Bean</span><br><span class="line">//    public PerformanceInterceptor performanceInterceptor() &#123;</span><br><span class="line">//        PerformanceInterceptor performanceInterceptor = new PerformanceInterceptor();</span><br><span class="line">//        //格式化sql语句</span><br><span class="line">//        Properties properties = new Properties();</span><br><span class="line">//        properties.setProperty(&quot;format&quot;, &quot;true&quot;);</span><br><span class="line">//        performanceInterceptor.setProperties(properties);</span><br><span class="line">//        return performanceInterceptor;</span><br><span class="line">//    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-CodeGenerator-配置"><a href="#4-CodeGenerator-配置" class="headerlink" title="4. CodeGenerator 配置"></a>4. CodeGenerator 配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">public class CodeGenerator &#123;</span><br><span class="line">    public static String scanner(String tip) &#123;</span><br><span class="line">        Scanner scanner = new Scanner(System.in);</span><br><span class="line">        StringBuilder help = new StringBuilder();</span><br><span class="line">        help.append(&quot;请输入&quot; + tip + &quot;：&quot;);</span><br><span class="line">        System.out.println(help.toString());</span><br><span class="line">        if (scanner.hasNext()) &#123;</span><br><span class="line">            String ipt = scanner.next();</span><br><span class="line">            if (StringUtils.isNotEmpty(ipt)) &#123;</span><br><span class="line">                return ipt;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        throw new BaseException(&quot;请输入正确的&quot; + tip + &quot;！&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        // 代码生成器</span><br><span class="line">        AutoGenerator mpg = new AutoGenerator();</span><br><span class="line"></span><br><span class="line">        // 全局配置</span><br><span class="line">        GlobalConfig gc = new GlobalConfig();</span><br><span class="line">        String projectPath = System.getProperty(&quot;user.dir&quot;);</span><br><span class="line">        gc.setOutputDir(projectPath + &quot;\\javayh-mybatisplus\\src\\main\\java&quot;);</span><br><span class="line">        gc.setAuthor(&quot;Dylan Yang&quot;);</span><br><span class="line">        gc.setOpen(false);</span><br><span class="line">        // gc.setSwagger2(true); 实体属性 Swagger2 注解</span><br><span class="line">        mpg.setGlobalConfig(gc);</span><br><span class="line"></span><br><span class="line">        // 数据源配置</span><br><span class="line">        DataSourceConfig dsc = new DataSourceConfig();</span><br><span class="line">        dsc.setUrl(&quot;jdbc:mysql://localhost:3306/guns?useUnicode=true&amp;useSSL=false&amp;characterEncoding=utf8&quot;);</span><br><span class="line">        // dsc.setSchemaName(&quot;public&quot;);</span><br><span class="line">        dsc.setDriverName(&quot;com.mysql.jdbc.Driver&quot;);</span><br><span class="line">        dsc.setUsername(&quot;root&quot;);</span><br><span class="line">        dsc.setPassword(&quot;1219320&quot;);</span><br><span class="line">        mpg.setDataSource(dsc);</span><br><span class="line"></span><br><span class="line">        // 包配置</span><br><span class="line">        PackageConfig pc = new PackageConfig();</span><br><span class="line">//        pc.setModuleName(scanner(&quot;模块名&quot;));</span><br><span class="line">        pc.setParent(&quot;com.javayh&quot;);</span><br><span class="line">        mpg.setPackageInfo(pc);</span><br><span class="line"></span><br><span class="line">        // 自定义配置</span><br><span class="line">        InjectionConfig cfg = new InjectionConfig() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void initMap() &#123;</span><br><span class="line">                // to do nothing</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        // 策略配置</span><br><span class="line">        StrategyConfig strategy = new StrategyConfig();</span><br><span class="line">        strategy.setNaming(NamingStrategy.underline_to_camel);</span><br><span class="line">        strategy.setColumnNaming(NamingStrategy.underline_to_camel);</span><br><span class="line">//        strategy.setSuperEntityClass(&quot;com.javayh.entity.Pages&quot;);</span><br><span class="line">        strategy.setEntityLombokModel(true);</span><br><span class="line">        strategy.setRestControllerStyle(true);</span><br><span class="line">//        strategy.setSuperControllerClass(&quot;com.javayh.BaseController&quot;);</span><br><span class="line">        strategy.setInclude(scanner(&quot;表名，多个英文逗号分割&quot;).split(&quot;,&quot;));</span><br><span class="line">        strategy.setSuperEntityColumns(&quot;id&quot;);</span><br><span class="line">        strategy.setControllerMappingHyphenStyle(true);</span><br><span class="line">        strategy.setTablePrefix(pc.getModuleName() + &quot;_&quot;);</span><br><span class="line">        mpg.setStrategy(strategy);</span><br><span class="line">        mpg.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置结束，这时我们就可以生成代码了！</p><h2 id="CRUD演示"><a href="#CRUD演示" class="headerlink" title="CRUD演示"></a>CRUD演示</h2><h3 id="1-Controller"><a href="#1-Controller" class="headerlink" title="1. Controller"></a>1. Controller</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">     * 调用mapper实现</span><br><span class="line">     * @param vo</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @PostMapping(value = &quot;queryPageThree&quot;)</span><br><span class="line">    public Result queryPageThree(@RequestBody SysRoleVO vo)&#123;</span><br><span class="line">        return Result.javaYhQuerySuccess(iSysRoleService.queryPageThree(vo));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 新增</span><br><span class="line">     * @param sysRole</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @PostMapping(value = &quot;save&quot;)</span><br><span class="line">    public Result save(@RequestBody @Valid SysRole sysRole)&#123;</span><br><span class="line">        return Result.javaYhInsertSuccess(iSysRoleService.saveAll(sysRole));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="2-Service"><a href="#2-Service" class="headerlink" title="2. Service"></a>2. Service</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">    public IPage&lt;SysRole&gt; queryPageThree(SysRoleVO vo) &#123;</span><br><span class="line">        //where</span><br><span class="line">        QueryWrapper wrapper = new QueryWrapper&lt;&gt;();</span><br><span class="line">        wrapper.like(&quot;num&quot;,vo.getNum());</span><br><span class="line">        //等于</span><br><span class="line">        wrapper.eq(&quot;num&quot;,vo.getNum());</span><br><span class="line">        //不等于</span><br><span class="line">        wrapper.ne(&quot;num&quot;,&quot;2&quot;);</span><br><span class="line">        //排序</span><br><span class="line">        wrapper.orderByDesc(&quot;pid&quot;,&quot;name&quot;);</span><br><span class="line">        //包含 1,2,3,4,5,6,7,8</span><br><span class="line">        wrapper.inSql(&quot;num&quot;,&quot;1,2,3,4,5,6,7,8&quot;);</span><br><span class="line">        //分页</span><br><span class="line">        Page page = new Page(vo.getPageCurrent(),vo.getPageSize());</span><br><span class="line">        return sysRoleMapper.selectPage(page,wrapper);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public SysRole saveAll(SysRole sysRole) &#123;</span><br><span class="line">        int insert = sysRoleMapper.insert(sysRole);</span><br><span class="line">        if (insert &gt; 0)&#123;</span><br><span class="line">            return sysRoleMapper.selectById(sysRole.getId());</span><br><span class="line">        &#125;else &#123;</span><br><span class="line">            throw new BaseException(&quot;save is falid&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="3-效果展示"><a href="#3-效果展示" class="headerlink" title="3. 效果展示"></a>3. 效果展示</h3><p>分页查询<br><img src="https://img-blog.csdnimg.cn/2019061917435143.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zODkzNzg0MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>新增<br><img src="https://img-blog.csdnimg.cn/20190619174453852.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zODkzNzg0MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h5 id="今天分享到此为止，我不明白之处可以联系小编，不足之处还请多多包涵！"><a href="#今天分享到此为止，我不明白之处可以联系小编，不足之处还请多多包涵！" class="headerlink" title="今天分享到此为止，我不明白之处可以联系小编，不足之处还请多多包涵！"></a>今天分享到此为止，我不明白之处可以联系小编，不足之处还请多多包涵！</h5><p><img src="https://img-blog.csdnimg.cn/20190619174702139.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zODkzNzg0MA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p>这是本文的代码地址<br><a href="https://github.com/Dylan-haiji/javayh-cloud" target="_blank" rel="noopener">https://github.com/Dylan-haiji/javayh-cloud</a><br>欢迎各位star</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;MyBatisPlus简洁&quot;&gt;&lt;a href=&quot;#MyBatisPlus简洁&quot; class=&quot;headerlink&quot; title=&quot;MyBatisPlus简洁&quot;&gt;&lt;/a&gt;MyBatisPlus简洁&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;MyBatis-Plus（简称 MP）是一个 MyBatis 的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。&lt;br&gt;&lt;strong&gt;愿景&lt;/strong&gt;&lt;br&gt;我们的愿景是成为 MyBatis 最好的搭档，就像 魂斗罗 中的 1P、2P，基友搭配，效率翻倍。&lt;img src=&quot;https://img-blog.csdnimg.cn/20190619172039860.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zODkzNzg0MA==,size_16,color_FFFFFF,t_70&quot; alt=&quot;在这里插入图片描述&quot;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="微服务" scheme="http://yoursite.com/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
</feed>
